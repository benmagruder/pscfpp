#!/bin/bash

#-----------------------------------------------------------------------
# Name: configure
#
# Purpose: Sets macros enable or disable features prior to compiling.
#
# This script should be called prior to compiling in order to enable or
# disable particular compile time features. See the usage examples at the 
# bottom of this documentation block. This version of the script must be
# called from the root of the build directory tree in which a corresponding
# version of the code will built (e.g., the src/ directory for in-source
# compilation or the bld/ directory for out-of-source compilation.  Each 
# build directories contains a copy of this script.  Invoking the configure 
# script in a specific build directory only affects code that is built in 
# that directory.
#
# The configure script works by editing the config.mk makefile fragments 
# in the build directory from which it is called. These files control
# which preprocessor macros are passed to the compiler for code compiled 
# in that build directory.
#
# Synopsis:
#
#      ./configure [options]
#
# Command Line Options: 
#   
# Each of the following options enables or disables a feature. Each such
# options takes 0 or 1 as a required argument, using 1 to denote "enable"
# and 0 to denote "disable".
#
#   -d (0|1)   debugging           (defines/undefines UTIL_DEBUG)
#   -c (0|1)   CUDA code           (defines/undefines PSCF_CUDA) 
#
# These command line options do not enable or disable features: 
#
#   -q           query: prints report of options that are enabled / disabled.
#
# Examples:
#
# To enable conditional compilation of CUDA code (disabled by default)
#
#   >  ./configure -c1
#
# To disable debugging 
#
#   >  ./configure -d0 
#
#-----------------------------------------------------------------------
while getopts "d:c:qh" opt; do

  if [ -n "$MACRO" ]; then 
    MACRO=""
  fi
  if [ -n "$FILE" ]; then 
    FILE=""
  fi
  
  case $opt in
    d)
      MACRO=UTIL_DEBUG
      VALUE=1
      FILE=config.mk
      ;;
    c)
      MACRO=PSCF_CUDA
      VALUE=1
      FILE=config.mk
      ;;
    q)
      if [ `grep "^ *UTIL_DEBUG *= *1" config.mk` ]; then
         echo "-d ON  - debugging" >&2
      else
         echo "-d OFF - debugging" >&2
      fi
      if [ `grep "^ *PSCF_CUDA *= *1" config.mk` ]; then
         echo "-c ON  - CUDA compilation" >&2
      else
         echo "-c OFF - CUDA compilation" >&2
      fi
      ;;
    h)
      echo "The configure script may be called prior to compiling to enable"
      echo "or disable specific compile time features, or query which features" 
      echo "are currently set to be enabled. This script must be called from"
      echo "the directory that contains the configure script file, and only"
      echo "effects code built in the same directory tree."
      echo " "
      echo "Command Line Options:"
      echo "-q           query: lists options that are enabled / disabled."
      echo "-h           help: prints explanation of options (this command)"
      echo " "
      echo "Each of the following options enables or disables a feature by"
      echo "defining or undefining a corresponding preprocessor macro. Each"
      echo "such option echo takes 0 or 1 as a required argument, using 1 to"
      echo "enable a feature or 0 to disable one." 
      echo " "
      echo "-c (0|1)   CUDA code            (undefines/defines UTIL_DEBUG)"
      echo "-d (0|1)   debugging            (undefines/defines UTIL_DEBUG)"
      echo " "
      ;;
  esac

  if [ -n "$MACRO" ]; then
    
    case $OPTARG in
    0)  # Disable (comment out) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "Disabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *$MACRO=/#$MACRO=/" temp > "$FILE"
         rm temp
      else
         echo "$MACRO already disabled in file $FILE" >&2
      fi
      ;;
    1) # Enable (uncomment) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "$MACRO already enabled in file $FILE" >&2
      else
         echo "Enabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *# *$MACRO=/$MACRO=/" temp > "$FILE"
         rm temp
      fi
      ;;
    esac
  fi

done
