TODO (pspg GPU code):

Clean up of kernel functions
-------------------------------------------------------------------------

1) Comment out (first) then erase (second) unused kernels.
   Some are found in solvers/Block.tpp and (possibly?) math/Helpers.cu
   (From Ryan: definitely some in math/Helpers.cu!)

2) Replace scaleRealData in fieldFFT.tpp by function from linearAlgebra

3) Consider moving FFTBatched.tpp/scaleComplexData to linearAlgebra

4) Consider moving some pointwise multiplication functions from Block
   to LinearAlgebra, including those that operate on complex data.

5) Move parallel reduction kernels to private namespace in implementation
   of kernel wrappers, so not publically visible. 

6) Establish more consistent function name conventions.

   One possibile set of semantic units for vector operations:

       LHS (result):
        vecr - real vector
        vecc - complex vector

       Operations:
       Sub   -> subtract
       Add   -> add
       Mul   -> add
       Div   -> divide 
       Eq    -> assignment

       RHS operands:
       V     -> vector on rhs (same as LHS by default)
       Vr    -> real vector (when not same as lhs type)
       Vc    -> complex vector (when not same as lhs type)
       R     -> real scalar 
       C     -> complex scalar 

   Example kernel names (called with CUDA <<< ... >>> ) syntax

       // Unary operations (vrOpA => v = v Op A)
       subtractUniform          -> vecrSubR
       addUniform               -> vecrAddR
       pointWiseSubtract        -> vecrSubV
       pointWiseAdd             -> vecrAddV
       scaleReal                -> vecrMulR
       scaleComplex             -> veccMulR

       // Binary operations (vrAOpB => v = A Op B)
       pointWiseBinarySubtract  -> vecrSubVV
       pointWiseBinaryAdd       -> vecrAddVV

       // Assignment operations (LHS = 
       assign uniform           -> vecrEqR
       assign vector            -> vecrEqV
       assign exp of vector     -> vecrExpV

       Corresponding functions that return a complex-valued vector
       will start with vc. Arguments on the RHS side will use C for
       complex scalar, R for real scalar, V for complex vector and
       Vr for real vector.

       Corresponding C++ wrapper functions start with gpuVr or gpuVc.
       These are called using conventional C++ syntax, and compute 
       the thread grid internally. 

       Overloaded versions of wrapper functions will be provided for
       pointers, for which size must be provided as a parameter, and 
       for field containers, for which size is provided by container.

       Rationale for "gpu" prefix on cpu functions rather than kernels: 
       You don't need a "gpu" prefix on a kernel because the syntax 
       makes it clear that it's a kernel in declaration, definition, 
       and calling.  The prefix gpu on a wrapper declares that the 
       computation is actually done on a gpu, which isn't otherwise
       clear from the syntax.

       Parameter order same as in order of equation (lhs first).

    Example wrapper function for reductions:

       gpuReduceSum
       gpuReduceAbMax

       Corresponding kernel names have prefix reduce rather than gpuReduce

       Overloaded versions of wrappers for pointers and containers,
       in which thread grid is computed internally.
       Versions for pointers take the size as a parameter.

6) Rename files:

       LinearAlgebra  -> VectorOps
       KernelWrappers -> Reductions (both kernels and C++ wrappers)

       Provide overloaded operations for containers in files that
       define containers

       Move Helpers to draft/pspg ?
      
