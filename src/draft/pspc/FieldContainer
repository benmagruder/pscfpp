
Idea: 

   - Containers for fields for which we need basis and grid formats

   - Use WFieldContainer for w and h (external) fields

------------------------------------------------------------------
Proposal:

class FieldContainer {

public:

   allocate(int nMonomer, int nBasis, IntVec<D> meshDimensions);

   associate(FieldIo const & fieldIo);

   // Accessors

   DArray<double> const & basis() const;

   DArray<double> const & rGrid(int i) const;

   bool hasFields() const;

   bool isSymmetric() const;

protected:

   DArray<double> basis_;

   RField<D> rGrid_;

   FieldIo* fieldIoPtr_;

   bool hasFields_;

   bool hasFields_;

   bool isSymmetric_;

};

------------------------------------------------------------------
class WFieldContainer : public FieldContainer {

public:

   virtual void setBasis(DArray<double> const &);

   virtual void setRGrid(RField<D> const & ); 

};

------------------------------------------------------------------
class CFieldContainer : publicFieldContainer {

public:

   void setRGrid(RField<D> const & , bool isSymmetric); 

};

-----------------------------------------------------
class Mask {

   Similar to WFieldContainer, but with only one field, 
   rather than an array of nMonomer fields. 

   // Most of the same functions as WFieldContainer.

   double phiMask() const;

   double phiTot() const;

private:

   double phiMask_;

   double phiTot_;

};

-----------------------------------------------------
Usage in System for wFields

    private:

       WFieldContainer w_;
  
    public:  

       WFieldContainer& w();
       WFieldContainer const & w() const;

    Change in usage:
 
    system.wFieldsBasis() -> system.w().basis();
    system.wFieldsRGrid() -> system.w().rGrid();

    system.wFieldBasis(i) -> system.w().basis(i);
    system.wFieldRGrid(i) -> system.w().rGrid(i);

    system.setWFieldsBasis() -> system.w().set(...);
    system.setWFieldsRGrid() -> system.w().set(...);

    system.hasWFields()   -> system.w().hasFields();
    system.hasWFields()   -> system.w().isSymmetric();

-----------------------------------------------------
Usage in System for external fields - same as for w

    private:
       FieldArray h_
    public:  
       FieldArray& h();
       FieldArray const & h() const;
-----------------------------------------------------
    private:

       Mask mask_

    public:
  
       Mask& h();
       Mask const & h() const;
-------------------------------------------------------
    
Pros:

   - Simplify System somewhat
   - Can be used for w and h
   - Can also be used for Mask
   - Prevent explosion of functions in System with external fields 

Cons:

   - Requires users to look up interface of other classes
   - Inheritance makes it worse

Alternative:

   - Add a bunch of functions for h fields analogous to those for
     w and c fields. For both h and mask

     set(...)
     set(...)
     hFieldsBasis()
     hFieldsRGrid()
     hFieldsBasis(int i)
     hFieldsRGrid(int i)
     hasSymmetricHFields(....)
     hasHFields(....)
 
