#!/bin/bash

#-----------------------------------------------------------------------
# Name: setopts
#
# Purpose: Sets makefile macros that control compile-time options
#
# This script should be called prior to compiling in order to enable or
# disable particular compile time features, or to modify some settings. 
# See the usage examples at the bottom of this documentation block. This 
# version of the script must be called from the root of the build directory 
# tree in the code will be compiled (e.g., the src/ directory for in-source
# compilation or the bld/ directory for out-of-source compilation.  Each 
# build directory contains a copy of this script.  Invoking the setopts 
# script in a specific build directory only affects code that is built in 
# that directory.
#
# The setopts script works by editing the config.mk makefile fragments 
# in the build directory from which it is called. These files control
# which preprocessor macros are passed to the compiler for code compiled 
# in that build directory.
#
# Synopsis:
#
#      ./setopts [options]
#
# Command Line Options: 
#   
# The -q and -h command line options both provide information, and take
# no argument:
#
#   -q     query: prints report of options that are enabled / disabled.
#   -h     help: prints a list of available options 
#
# The -d, -c and -m options each enable or disable a feature. Each such
# option takes 0 or 1 as a required argument, using 1 to denote "enable"
# and 0 to denote "disable".
#
#   -d (0|1)   debugging           (defines/undefines UTIL_DEBUG)
#   -c (0|1)   CUDA code           (defines/undefines PSCF_CUDA) 
#   -m (0|1)   OpenMp code         (defines/undefines PSCF_OPENMP) 
#
# This -a option sets an identifier for the NVIDIA GPU architecture to be 
# targeted by the NVIDIA CUDA compiler. The argument of this command line 
# option is passed as the argument of the "-arch" option of the NVIDIA 
# C++ / CUDA compiler. Allowed values are string of the form sm_NN, where 
# NN is a number that gives the major and minor version number for the CUDA 
# "compute capability" for the target GPU. For example, the K40 GPU has a 
# compute capability 3.5, and requires an architecture code sm_35.
#
#  -a [architecture code]          (defines NVARCH)
#
# Examples:
#
# To enable debugging 
#
#   >  ./setopts -d1
#
# To disable debugging 
#
#   >  ./setopts -d0
#
# To enable conditional compilation of CUDA code (disabled by default)
# and set the GPU architecture option to sm_70 (compute capability 7.0,
# appropriate for a V100 chip) one could enter
#
#   >  ./setopts -c1  -a sm_70
#
#-----------------------------------------------------------------------
while getopts "a:c:d:m:qh" opt; do

  if [ -n "$MACRO" ]; then 
    MACRO=""
  fi
  if [ -n "$FILE" ]; then 
    FILE=""
  fi
  
  case $opt in
    a)
      MACRO=NVARCH
      FILE=config.mk
      ;;
    d)
      MACRO=UTIL_DEBUG
      VALUE=1
      FILE=config.mk
      ;;
    c)
      MACRO=PSCF_CUDA
      VALUE=1
      FILE=config.mk
      ;;
    m)
      MACRO=PSCF_OPENMP
      VALUE=1
      FILE=config.mk
      ;;
    q)
      if [ `grep "^ *UTIL_DEBUG *= *1" config.mk` ]; then
         echo "-d ON     - debugging" >&2
      else
         echo "-d OFF    - debugging" >&2
      fi
      if [ `grep "^ *PSCF_CUDA *= *1" config.mk` ]; then
         echo "-c ON     - CUDA compilation" >&2
      else
         echo "-c OFF    - CUDA compilation" >&2
      fi
      if [ `grep "^ *PSCF_OPENMP *= *1" config.mk` ]; then
         echo "-c ON     - OPENMP compilation" >&2
      else
         echo "-c OFF    - OPENMP compilation" >&2
      fi
      ;;
    h)
      echo " "
      echo " Purpose and usage:"
      echo " ------------------"
      echo " "
      echo " The setopts script may be called prior to compiling to enable"
      echo " or disable specific compile time features, set compiler options,"
      echo " and/or query which features are currently set to be enabled."
      echo " This script must be called from the directory that contains the"
      echo " script file, and only affects compiler settings for code that is"
      echo " built in the same directory tree (i.e., in src/ or in bld/). "
      echo " "
      echo " Command Line Options:"
      echo " ----------------------"
      echo "  "
      echo " The -q and -h command line options both provide information,"
      echo " and take no arguments:"
      echo " "
      echo "   -q   query: prints list of options that are enabled / disabled"
      echo "   -h   help: prints a list of available options"
      echo " "
      echo " The -d, -c, and -m options each enable or disable a feature."
      echo " Each such option takes 0 or 1 as a required argument, using 1"
      echo " to enable and 0 to disable the feature"
      echo "  "
      echo "   -d (0|1)   debugging         (defines/undefines UTIL_DEBUG)"
      echo "   -c (0|1)   CUDA code         (defines/undefines PSCF_CUDA)"
      echo "   -c (0|1)   OpenMP code       (defines/undefines PSCF_OPENMP)"
      echo " "
      echo " The -a option sets an identifier for the NVIDIA GPU architecture"
      echo " to be targeted by the NVIDIA CUDA compiler. The argument of this"
      echo " command line option is passed as the argument of the -arch"
      echo " option of the C++ / CUDA compiler. Allowed values are strings"
      echo " of the form sm_NN, where NN is a number that gives the major and"
      echo " minor version number for the CUDA compute capability for the"
      echo " target architecture. For example, the K40 GPU has a compute"
      echo " compute capability 3.5, and requires an architecture code sm_35."
      echo " "
      echo "  -a [architecture code]          (defines NVARCH)"
      echo " "
      echo " Examples:"
      echo " ---------"
      echo " "
      echo " To enable debugging"
      echo " "
      echo "   >  ./setopts -d1"
      echo " "
      echo " To disable debugging"
      echo " "
      echo "   >  ./setopts -d0"
      echo " "
      echo " To enable conditional compilation of CUDA code (disabled by"
      echo " default) and set the GPU architecture option to sm_70 (compute"
      echo " capability 7.0, appropriate for a V100 chip) one could enter"
      echo " "
      echo "   >  ./setopts -c1  -a sm_70"
      echo "  "
      ;;
  esac

  if [ -n "$MACRO" ]; then
    
    case $OPTARG in
    0)  # Disable (comment out) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "Disabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *$MACRO=/#$MACRO=/" temp > "$FILE"
         rm temp
      else
         echo "$MACRO already disabled in file $FILE" >&2
      fi
      ;;
    1) # Enable (uncomment) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "$MACRO already enabled in file $FILE" >&2
      else
         echo "Enabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *# *$MACRO=/$MACRO=/" temp > "$FILE"
         rm temp
      fi
      ;;
    *)
      echo "Setting $MACRO to $OPTARG in file $FILE" >&2
      sed "s/$MACRO *=.*$/$MACRO=$OPTARG/" "$FILE" > temp
      mv temp $FILE
    esac
  fi

done
