/*! \page psfts_algorithm_page  Simulation Algorithms

\ref psfts_psa_page    (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_param_page  (Next) &nbsp; &nbsp; &nbsp; &nbsp;
<BR>

The pscf_pc and pscf_pg programs allow PS-FTS simulations to be performed 
using either Brownian dynamics (BD) or Monte Carlo (MC) algorithms to 
stochastically sample a fluctuating field or fields.

BD and MC sampling algorithms for PS-FTS have a similar structure, both 
of which involve a random change in one or more fields follows by use of 
an iterative algorithm to find a partial-saddle point configuration. 
Throughout the PSCF documentation and source code, an iterative algorithm 
that is used to identify a partial saddle-point configuration, and thus 
satisfy the incompressibility constraint, is referred to as a "compressor" 
algorithm.

For example, consider a simulation of a standard AB system with two monomer
types. Such a system has an exchange field \f$ W_{-}({\bf r}) \f$ 
that undergoes random fluctuations and a pressure-like field 
\f$ W_{-}({\bf r}) \f$ that must be chosen to satisfy the partial 
saddle-point condition. At the beginning of either a BD step or MC move 
for such as system, a small random change is added to the exchange field 
\f$ W_{-} \f$.  Next, an iterative compressor algorithm is used to 
adjust the presssure-like field \f$ W_{+}({\bf r}) \f$ so as to satisfy 
the partial saddle-point condition, thus re-imposing incompressibility 
at a mean-field level.  Finally, for an MC simulation, a decision is made 
about whether to accept or reject the resulting MC move, based on the 
value of the Hamiltonian at the new partial saddle-point state. 

PSCF allows users to specify a set of data analysis and data output
operations that will be performed during a stochastic simulation. The 
C++ classes that implement such operations are subclasses of a base 
class named "Analyzer", and are referred to generically as analyzers 
or analyzer classes. Each analyzer class performs a specified operation 
at some regular interval during a simulation (e.g., every 10 or 100 
simulation steps).  Analyzer classes may compute physical quantities 
of interest, accumulate statistical properties of such properties,
such as average values and variances, and periodically output data to 
file. The simplest type of analyzer is one that periodically writes 
the entire field configuration to file for later analysis.

The format of a PSCF parameter file is thus designed to allow a user 
to choose at run time from sets of available choices for three different 
types of simulation and anaysis algorithms:

   - **BD or MC Sampling** :  BD or MC stochastic sampling algorithms,
     which are used to update the fluctuating field or fields.

   - **Compressor** :  A compressor algorithm that is used to adjust
     the pressure-like field \f$ W_{+} \f$ so as to again satisfy 
     the partial saddle-point condition after a change in the 
     fluctuating field. 

   - **Analyzers** :  Data analysis and/or data output operations
     that are performed at regular intervals during a simulation.

The format for parameter files used by pscf_pc and pscf_pg programs 
contains an optional "Simulator" block that must be present to enable 
PS-FTS calculations. This block is normally omitted in parameter 
files for SCFT calculations. The Simulator block contains three main 
subblocks that specify choices and associated parameter values for 
sampling, compressor, and analysis algorithms, respectively.

\section psfts_algorithm_BD Brownian Dynamics (BD) Sampling

The description of BD step algorithms used to define parameters is 
based on units in which the fictitious "time" is measured in units of 
BD steps and energy is measured in units in which \f$ kT = 1 \f$. The 
typical magnitude of changes in the exchange field(s) per time step 
is controlled by a "mobility" parameter, which is denoted by the label 
"mobility" in the parameter file, and by the symbol \f$ \gamma \f$ in 
these notes.

As an example, an explicit Euler BD step algorithm for a standard AB 
system yields a change \f$ \Delta W_{-}({\bf r}) \f$ per time 
step in the exchange field \f$ W_{-}({\bf r}) \f$ at grid point 
\f$ {\bf r} \f$ that is given by
\f[
  \Delta W_{-}({\bf r}) =
  - \gamma \frac{\delta H}{\delta W_{-}({\bf r})}
  + g({\bf r})
\f]
where \f$ \gamma \f$ is the BD mobility parameter, \f$ g({\bf r}) \f$ 
is a random field displacement, and
\f[
  \frac{\delta H}{\delta W_{-}({\bf r})}
  = \frac{1}{v} \left [
    \frac{2 W_{-}({\bf r})}{\chi_{b}}
    - \Phi_{-}({\bf r}) \right ]
    \quad.
\f]
The random displacement \f$ g({\bf r}) \f$ is chosen independently at 
each grid point and each BD step from a Gaussian distribution with a 
vanishing mean value, \f$ \overline{g({\bf r})} = 0 \f$, and with a 
variance
\f[
  \overline{g^{2}({\bf r})} = \gamma \Delta V \quad.
\f]
Here, \f$ \Delta V \f$ is the volume per grid point of the computational 
mesh, given by \f$ \Delta V = V/G \f$, where \f$ V \f$ is the total 
system volume and \f$ G \f$ is the number of grid points on the mesh.

The mobility parameter has an analogous meeting in more complicated 
BD step algorithms, and always appears as a prefactor of 
\f$ \delta H/\delta W_{-}({\bf r}) \f$ in expressions for 
changes in \f$ W_{-}({\bf r}) \f$.

Other authors have sometimes referred to what we call a "mobility" as 
a time step, sometimes indicated by a s symbol such \f$ \Delta t \f$ or
\f$ \delta t \f$.  We refer to this parameter as a mobility rather 
than a time step because there is no natural definition of time or 
units of time in this context, in which an inertialess BD algorithm 
is simply being used to sample an equilibrium distribution.

PSCF currently allows users to choose from among three BD step 
algorithms: 
<ul>
  <li>
  <li> The \ref rpc_LMBdStep_page "Leimkuhler-Matthews (LM)" BD step 
  algorithm </li>
  <li> A \ref rpc_PredCorrBdStep_page "predictor corrector" algorithm,
  </li>
  The \ref rpc_ExplicitBdStep_page "explicit Euler" algorithm 
  described above,  </li>
</ul>
We recommand the Leimkuhler-Matthews algorithm for general use as 
the most accurate and efficient of these options. 

\section psfts_algorithm_MC Monte Carlo (MC) Sampling

The PSCF implementation of MC sampling allows the user to specify a set 
of Monte Carlo move types to be used during an MC simulation. When more
than one type of move is specified, one of the move algorithms is chosen
at random at the beginning of each step, using probabilities that are
specified by the user.  The algorithm for each attempted step of an MC 
simulation is thus:

   - Choose a type of MC move at random from among a set
     of choices specified by the user.

   - Use the chosen MC move to generate a random change in
     \f$ W_{-} \f$.

   - Use the chosen compressor algorithm to adjust the
     real pressure like field \f$ W_{+}({\bf r}) \f$
     so as to satisfy the partial saddle-point condition.

   - Evaluate the Hamiltonian in the new partial saddle
     point state.

   - Use a Metropolis criterion that is designed to
     satisfy detailed balance to decide whether to
     accept or reject the move.

   - If the move is rejected, restore the system to
     the field configuration it had before the
     beginning of the attempted step.

The block of the parameter file for an MC simulation that contains 
information about MC moves, which is labelled "McMoveManager", contains 
one or more subblocks that are associated with different types of move.  
The parameter file block associated with each such MC move type always
contains a "probability" parameter that specifies the probability of 
that type of move being chosen at the start of each step, among other 
required parameters.

PSCF currently provides the following two MC step algorithms: 
<ul>
  <li> A \ref rpc_ForceBiasMove_page "force bias" MC move
  that uses an explicit Euler BD step to generate a proposed
  MC move. </li>
  <li> A simple MC move named \ref rpc_RealMove_page "RealMove" 
  that generates spatially uncorrelated random changes of 
  \f$ W_{-} \f$ at different grid points </li> 
</ul>
The ForceBiasMove move generally leads to much more efficient sampling 
than the simpler real move.

Acceptance rates for both of these types of MC moves decrease rapidly
with increasing system size, leading MC to be less inefficient than BD 
for large systems. We generally recommend the use of BD rather than MC 
simulation for 3D systems with roughly \f$ 10^{4} \f$ or more grid points. 

One virtue of MC simulations over BD simulations is that, because MC 
algorithms are designed to satisfy a detailed balance condition, they 
do not exhibit any systematic sampling error: An infinitely long MC 
simulation should, in principle, yield exact results for any average 
value obtained from a model with a specific choice of spatial 
discretization (though calculations computed with the same input 
parameters on different meshes do yield measurably different results). 
The only sampling errors in MC simulations are true statistical errors 
arising from the finite length of a simulation, which can be estimated 
by standard statistical methods, and errors arising from round off of 
floating point numbers, which are usually small.  BD simulations
instead exhibit an systematic error due to discretization of the time 
coordinate in the Langevin equation, an error that increases with 
increases in the mobility parameter. Results of MC simulations of 
small systems can thus be useful for comparison when evaluating 
correctness of new MC and BD algorithms, and when evaluating systematic 
errors in BD algorithms.

\section psfts_algorithm_compressor_sec Compressor Algorithms

The PSCF paramater file format allows the user to choose from among
several "compressor" algorithms. The compressor is an iterative 
algorithms that adjust the \f$ W_{+} \f$ field so as to satisfy a 
partial saddle-point condition, which must applied at last once per
BD or MC stochastic step after each change in \f$ W_{-} \f$. Users
may choose a compressor algorithm independently of their choice for 
a BD step or MC move algorithms: Any compressor algorithm may be 
used in the context of any stochastic step algorithm. 

Solution of the saddle-point condition normally requires multiple
iterations of \f$ W_{+} \f$. Each iteration normally involves a 
proposed adjustment of \f$ W_{+} \f$ followed by solution of the 
modified diffusion equation (MDE) in the resulting state, which 
is necessary to evaluate the remaining error. Because repeated
solution of the MDE is the most expensive operation in a FTS, and
the compressor algorithm requires multiple solutions of the MDE 
for each BD or MC step, almost all of the computational time of
PS-FTS calculation is spent within the compressor algorithm. 

The available compressor algorithms are listed below. Users may click
on the link associated with each algorithm label to access more a
detailed description of each the algorithm, and of the format of the 
associated parameter file block. 
<ul>
  <li> \ref rpc_AmCompressor_page "AmCompressor" </li>
  <li> \ref rpc_LrCompressor_page "LrCompressor" </li>
  <li> \ref rpc_LrAmCompressor_page "LrAmCompressor" </li>
</ul>
The LrAmCompressor is recommended for general use. 


\section psfts_algorithm_analyer_sec Analysis Algorithms

Describe roles for analyzer classes

<BR>
\ref psfts_psa_page    (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_page        (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_param_page  (Next) &nbsp; &nbsp; &nbsp; &nbsp;

*/
