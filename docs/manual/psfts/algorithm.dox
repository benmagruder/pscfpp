/*! \page psfts_algorithm_page  Simulation Algorithms

\ref psfts_psa_page    (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_param_page  (Next) &nbsp; &nbsp; &nbsp; &nbsp;
<BR>

The pscf_pc and pscf_pg programs allow PS-FTS simulations to be performed 
using either Brownian dynamics (BD) or Monte Carlo (MC) algorithms to 
stochastically sample a fluctuating field or fields.

BD and MC sampling algorithms for PS-FTS have a similar structure.  A 
single BD step or MC move generally requires generation of a random 
change in one or more exchange fields, followed by use of an iterative 
algorithm to find a new partial-saddle point configuration.
Throughout the PSCF documentation and source code, iterative algorithms 
that are used to identify partial saddle-point configurations, and thus 
satisfy an incompressibility constraint, are referred to as a "compressor" 
algorithm.

For example, consider a PS-FTS simulation of a standard AB system with 
two monomer types. Such a system has a real exchange field 
\f$ W_{-}({\bf r}) = \omega_{-}({\bf r}) \f$ that undergoes random 
fluctuations and a real pressure-like field 
\f$ W_{+}({\bf r}) = i \omega_{+}({\bf r})\f$ that must be chosen to 
satisfy the partial saddle-point condition. At the beginning of either a 
BD step or MC move for such as system, a small random change is added to 
the exchange field \f$ W_{-} \f$.  Next, an iterative compressor algorithm 
is used to adjust the presssure-like field \f$ W_{+}({\bf r}) \f$ so as 
to satisfy the partial saddle-point condition, thus imposing 
incompressibility at a mean-field level.  Finally, for an MC simulation, 
a decision is made about whether to accept or reject the resulting MC 
move, based on the value of the Hamiltonian in the resulting new partial 
saddle-point state. 

PSCF allows users to specify a set of data output and data analysis 
operations that will be performed during a BD or MC simulation. The 
C++ classes that implement such operations are referred to generically
analyzers or analyzer classes. Each analyzer class performs a specified 
operation at some regular interval during a simulation (e.g., every 10 
or 100 simulation steps).  Analyzer classes may compute physical 
quantities of interest, periodically output data to a file, and/or
accumulate statistical properties such as average values and variances
for properties of interest. 

The format of a PSCF parameter file is thus designed to allow a user 
to choose at run time from sets of available choices for three different 
types of simulation and analysis algorithms:

   - **Sampling** :  A BD step algorithm or a set of MC step algorithms
     is used to update the fluctuating field components.

   - **Compressor** :  A compressor algorithm that is used to adjust
     the pressure-like field \f$ W_{+} \f$ so as to always satisfy the 
     partial saddle-point condition.

   - **Analyzers** :  Data analysis and/or data output operations that 
     are performed at regular intervals during a simulation.

The format for parameter files used by pscf_pc and pscf_pg programs 
contains an optional "Simulator" block that must be present to enable 
PS-FTS calculations. Because it contains information that is only
needed for FTS, this block is normally omitted in parameter files for 
SCFT calculations. The Simulator block contains three main subblocks 
that specify choices algorithms and associated parameter values for 
sampling, compressor, and analysis algorithms, respectively. The 
available options for BD or MC sampling algorithms and compressor 
algorithms are all listed below, with links to more detailed 
descriptions. Data analysis algorithms are discussed a 
\ref psfts_analysis_page "separate page". 

\section psfts_algorithm_BD_sec Brownian Dynamics (BD) Simulation

The description of BD step algorithms used to define parameters is 
based on units in which the fictitious "time" is measured in units of 
BD steps, while energy is measured in units in which \f$ kT = 1 \f$. 
The typical magnitude of changes in the exchange field(s) per time step 
is controlled by a parameter that is denoted by the label "mobility" 
in the parameter file, and denoted by the symbol \f$ \gamma \f$ in 
these notes.

As an example, consider the explicit Euler BD step algorithm for a 
standard AB system. This algorithm yields a change 
\f$ \Delta W_{-}({\bf r}) \f$ per time step in the exchange field 
\f$ W_{-}({\bf r}) \f$ at grid point \f$ {\bf r} \f$ that is given by
\f[
  \Delta W_{-}({\bf r}) =
  - \gamma \frac{\delta H}{\delta W_{-}({\bf r})}
  + g({\bf r})
\f]
where \f$ \gamma \f$ is the BD mobility parameter, \f$ g({\bf r}) \f$ 
is a random field displacement, and
\f[
  \frac{\delta H}{\delta W_{-}({\bf r})}
  = \frac{1}{v} \left [
    \frac{2 W_{-}({\bf r})}{\chi_{b}}
    - \Phi_{-}({\bf r}) \right ]
    \quad.
\f]
The random displacement \f$ g({\bf r}) \f$ is chosen independently at 
each node of the computational mesh and each BD step from a Gaussian 
distribution with a vanishing mean value, \f$ \overline{g({\bf r})} = 0 \f$, 
and with a variance
\f[
  \overline{g^{2}({\bf r})} = \gamma \Delta V \quad.
\f]
Here, \f$ \Delta V \f$ is the volume per node (or grid point) of the 
computational mesh, given by \f$ \Delta V = V/G \f$, where \f$ V \f$ 
is the total system volume and \f$ G \f$ is the total number of nodes 
in the mesh.

The mobility parameter has an analogous meaning in more sophisticated
BD step algorithms, and always appears as a prefactor of the "force"
\f$ \delta H/\delta W_{-}({\bf r}) \f$ in expressions for changes in 
\f$ W_{-}({\bf r}) \f$.

Other authors have sometimes referred to what we call a "mobility" as 
a time step, sometimes indicated by a symbol such \f$ \Delta t \f$ or
\f$ \delta t \f$.  We refer to this parameter as a mobility rather 
than a time step because there is no natural definition of time or 
units of time in this context, in which an inertialess BD algorithm 
is simply being used to sample an equilibrium distribution.

PSCF currently allows users to choose from among three BD step 
algorithms: 
<ul>
  <li> The \ref rpc_LMBdStep_page "Leimkuhler-Matthews (LM)" BD step 
  algorithm </li>
  <li> A \ref rpc_PredCorrBdStep_page "predictor corrector" algorithm,
  </li>
  <li>
  The \ref rpc_ExplicitBdStep_page "explicit Euler" algorithm 
  described above,  </li>
</ul>
We recommand the Leimkuhler-Matthews (LM)algorithm for general use 
as the most accurate and efficient of these options. The accuracy 
of the LM step algorithm is found to be better than that of the 
predictor-corrector algorithm (though both provide the same order 
of weak convergence). The cost per step is nearly identical to 
that of an explicit Euler algorithm (involving one MDE solution
per step), and approximately half the cost of the predictor 
corrector algorithm (which requires two MDE solutions per step).

\section psfts_algorithm_MC Monte Carlo (MC) Simulation

The PSCF implementation of MC sampling allows the user to specify a set 
of Monte Carlo move types to be used during an MC simulation. When more
than one type of move is specified, one of the move algorithms is chosen
at random at the beginning of each step, using probabilities that are
specified by the user.  The algorithm for each attempted step of an MC 
simulation is thus:

   - Choose a type of MC move at random from among a set of choices
     specified by the user.

   - Use the chosen MC move to generate a random change in \f$ W_{-} \f$.

   - Use the chosen compressor algorithm to adjust the real pressure-like 
     field \f$ W_{+}({\bf r}) \f$ so as to satisfy the partial 
     saddle-point condition.

   - Evaluate the Hamiltonian in the new partial saddle point state.

   - Use a Metropolis criterion that is designed to satisfy detailed 
     balance to decide whether to accept or reject the move.

   - If the move is rejected, restore the system to the field 
     configuration that had existed before the beginning of the 
     attempted move.

The block of the parameter file for an MC simulation that contains 
information about MC moves, which is labelled "McMoveManager", contains 
one or more subblocks that are associated with different types of move.  
The parameter file block associated with each such MC move type always
contains a "probability" parameter that specifies the probability of 
that type of move being chosen at the start of each step, among other 
required parameters.

PSCF currently provides the following two MC step algorithms: 
<ul>
  <li> \ref rpc_ForceBiasMove_page "ForceBiasMove": A "smart MC" or
  "force bias" MC move that uses an explicit Euler BD step to 
  generate a proposed MC move. </li>
  <li> \ref rpc_RealMove_page "RealMcMove" : A simple MC move that 
  generates spatially uncorrelated random changes of 
  \f$ W_{-} \f$ at different grid points </li> 
</ul>
The ForceBiasMove algorithm generally leads to much more efficient 
sampling than the simpler real move, and is recommended as the workhorse 
method for MC simulations.

Acceptance rates for both of these types of MC moves decrease rapidly
with increasing system size, though the effect is much more severe with
the simple real-space MC move. Because BD simulation does not suffer 
from a similar problem, this phenomena causes MC to become less 
efficient than BD for sufficiently large systems. We thus generally 
recommend the use of BD rather than MC simulation for 3D systems with 
roughly \f$ 10^{4} \f$ or more grid points. 

One virtue of MC simulations over BD simulations is that, because MC 
algorithms are designed to satisfy a detailed balance condition, they 
do not exhibit any systematic sampling error. An infinitely long MC 
simulation should, in principle, yield exact results for any average 
value obtained from a particular model on a specified computational
mesh.  The only sampling errors in MC simulations are true statistical 
errors arising from the finite length of a simulation, which can be 
estimated by standard methods, and errors arising from round off of 
floating point numbers, which are usually small.  BD simulations
instead exhibit an systematic error due to discretization of the time 
coordinate in the Langevin equation, an error that increases with 
increases in the mobility parameter. Results of MC simulations of 
small systems can thus be useful for comparison when evaluating 
correctness of new MC and BD algorithms, and when evaluating systematic 
errors in BD algorithms.

\section psfts_algorithm_compressor_sec Compressor Algorithms

The PSCF paramater file format allows the user to choose from among
several "compressor" algorithms. The compressor is an iterative 
algorithms that adjust the \f$ W_{+} \f$ field so as to satisfy a 
partial saddle-point condition, which must applied at last once per
BD or MC stochastic step after each change in \f$ W_{-} \f$. Users
may choose a compressor algorithm independently of their choice for 
a BD step or MC move algorithms: Any compressor algorithm may be 
used in the context of any stochastic step algorithm. 

Solution of the saddle-point condition normally requires multiple
iterations of \f$ W_{+} \f$. Each iteration normally involves a 
proposed adjustment of \f$ W_{+} \f$ followed by solution of the 
modified diffusion equation (MDE) in the resulting state, which 
is necessary to evaluate the remaining error. Because repeated
solution of the MDE is the most expensive operation in a FTS, and
the compressor algorithm requires multiple solutions of the MDE 
for each BD or MC step, almost all of the computational time of
PS-FTS calculation is spent within the compressor algorithm. 

The available compressor algorithms are listed below. Users may 
click on the link associated with each algorithm label to access 
more a detailed description of each the algorithm, and of the format 
of the associated parameter file block. 
<ul>
  <li> \ref rpc_LrAmCompressor_page "LrAmCompressor" </li>
  <li> \ref rpc_LrCompressor_page "LrCompressor" </li>
  <li> \ref rpc_AmCompressor_page "AmCompressor" </li>
</ul>
The LrAmCompressor is the default choice, and is recommended for 
general use. 


<BR>
\ref psfts_psa_page    (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_page        (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_param_page  (Next) &nbsp; &nbsp; &nbsp; &nbsp;

*/
