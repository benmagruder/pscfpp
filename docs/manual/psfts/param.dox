/*! \page psfts_param_page Parameter File

\ref psfts_algorithm_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_command_page    (Next)
<BR>

PSCF can perform partial saddle-point field theoretic simulation 
(PS-FTS) using either Brownian dynamics (BD) or Monte Carlo (MC)
sampling methods. Parameter file formats for these two types of
simulations share a common overall structure that is described 
in the remainder of this page, along with examples for both types
of simulation and discussion of the differences.

\section psfts_param_overview_sec Parameter File Structure (Overview)

A parameter file used for either BD or MC FTS calculations must 
begin with Mixture, Interaction and Domain blocks that contain 
similar information and as that in corresponding blocks used in 
an SCFT parameter file for a periodic structure. 

To enable BD or MC simulation, the Mixture, Interaction, and
Domain blocks must be followed by an selectable "Simulator" block 
that contains parameters that are required for the chosen type of 
FTS, but that are not necessary for SCFT calculations. 
The selectable Simulator block must either be a "BdSimulator" 
block, to enable a BD simulation, or an "McSimulator" block, to 
enable MC simulations. 
The BdSimulator and McSimulator blocks use slightly different 
param file formats, because they contain description of different 
types of stochastic sampling algorithms. 

The overall format of all allowed blocks in a parameter file 
for either pscf_pc or pscf_pg is shown below in skeleton form:
\code
System{
  Mixture{ ... }
  Interaction{ ... }
  Domain{ ... }
  Iterator#*{ ... }
  Sweep#*{ ... }
  Simulator#*{ ... }
}
\endcode
Note that only the Mixture, Interaction, and Domain blocks are required. 
The Iterator, Sweep, and Simulator blocks are instead all optional, 
selectable blocks that are needed to enable different types of 
calculation. The Iterator and Sweep blocks are only used for SCFT 
calculations, and so are normally omitted in parameter files that 
are used to initialize a BD or MC FTS.  Conversely, the Simulator
block is only used for FTS simulations, and so is normally omitted
omitted in parameter files that are used to initialized SCFT
calculations.

The typical format for a parameter file that enables Brownian dynamics 
FTS, but that not does enable SCFT, is thus, in skeleton form:
\code
System{
  Mixture{ ... }
  Interaction{ ... }
  Domain{ ... }
  BdSimulator{ ... }
}
\endcode
The corresponding format for a parameter file for MC simulation is:
\code
System{
  Mixture{ ... }
  Interaction{ ... }
  Domain{ ... }
  McSimulator{ ... }
}
\endcode
Formats of the various blocks of these skeleton are discussed below.

\section psfts_param_Mixture_sec Mixture, Interaction and Domain Blocks

The initial Mixture, Interaction, and Domain blocks of a parameter 
file are needed for both SCFT and FTS simulations. These content of
these blocks is nearly identical in SCFT and FTS simulations, except
for the following differences in content or interpretation:

<ul>

<li>
**vMonomer** : The Mixture block used for a FTS must include a value 
for a parameter vMonomer that represents the monomer reference 
volume in an incompressible system. 
This is an optional parameter is not normally needed for SCFT 
calculations, and so is usually omitted from SCFT parameter files.  
In FTS, however, the value given for vMonomer determines the 
invariant degree of polymerization, and thus controls the magnitude 
of field fluctuations. The optional vMonomer parameter appears 
immediately after the Polymer blocks and (if any) Solvent blocks
that describe the chemical constituents of the system, and before
the ds parameter.  If the vMonomer parameter is omitted, it is set 
to vMonomer = 1.0 by default, which is rarely what one wants.
</li>

<li>
** Unit cell** : In a FTS, the unit cell described in the Domain 
describes the overall periodic computational unit cell. As in an
SCFT calculation, the type of the unit cell is specified in the
parameter file, and unit cell dimensions are given in the header
of the file containing the initial w fields. In FTS, these
dimensions are usually taken to be large enough to contain multiple 
unit cells of any expected periodic microstructure. 
</li>

<li>
**Sspace group (absence)** : In a FTS, one generally does not
impose any strict space group symmetry on the fields, since 
stochastically fluctuating fields will generally not exactly
preserve any of the nontrivial space group symmetries 
characteristic of many SCFT solutions. The optional spaceGroup 
parameter of the Domain block is thus usually omitted from a 
parameter file for FTS. 
</li>

</ul>

The BdSimulator and McSimulator parameter blocks share a common 
internal structure, except for differences in the sub-block that 
specifies details of the BD or MC sampling algorithm. BD and MC 
simulations are described separately below.

\section psfts_param_brownian_sec Brownian Dynamics

The overall structure for a BdSimulator block in a parameter file 
that enables BD simulation may be described schematically as follows:
\code
  BdSimulator{
    seed* int
    BdStep#{ ... }
    Compressor#{..}
    AnalyzerManager*{ .... }
  }
\endcode
The optional seed parameter may be used to set a seed for the
random number generator. The BdStep, Compressor, and AnalyzerManager
blocks contain parameters for, respectively, the BD step algorithm,
the compressor algorithm, and any associated analysis operations.
Because the BdStep and Compressor blocks are selectable, the actual
block label for these blocks may refer to the names of classes that 
implement particular choices of BD step algorithm and compressor 
algorithms, rather than the generic names BdStep and Compressor.
The AnalyzerManager contains nested one or more nested subblocks
for chosen analysis operations, as shown below.

Example: Here is an example of a complete parameter file for a BD
simulation:
\code
System{
  Mixture{
    nMonomer  2
    monomers[
             1.0  
             1.0 
    ]
    nPolymer  1
    Polymer{
      type    linear
      nBlock  2
      blocks[
              0   0.5
              1   0.5
      ]
      phi     1.0
    }
    vMonomer  0.01
    ds   0.02
  }
  Interaction{
    chi(
        1   0   18.0
    )
  }
  Domain{
    mesh         40    40    40
    lattice      cubic   
  }
  BdSimulator{
    seed           486893701
    LMBdStep{
      mobility  5.0E-2
    }
    LrAmCompressor{
      epsilon      1.0e-4
      maxHist      40
    }
    AnalyzerManager{
      baseInterval    10

      HamiltonianAnalyzer{
        interval        10
        outputFileName  out/hamiltonian
        nSamplePerBlock 5
      }

      StepLogger{
        interval        20
      }

    }
  }
}
\endcode
This parameter file could be used without modification by either the 
pscf_pc or pscf_pg program, which provide nearly identical capabilities.
This example gives parameters for a PS-FTS BD simulation of a melt of 
symmetric AB diblock copolymers. 

In the above example, the user has chosen Leimkuhler-Mathews (LM) 
Brownian dynamics step algorithm, as indicated by block label LMBDStep 
for the selectable BdStep block, and an LRAM compressor algorithm 
(indicated by the block label LrAmCompressor compressor for the 
Compressor block). 
We recommend these two algorithms as the current methods of choice
for BD simulations.
situations. The LM BD step and LRAM compressor are also the default 
choices for the BdStep and Compressor, and so can also be selected
using the generic "BdStep" or "Compressor" labels for these blocks.

<b> BD Step Algorithms: </b>
The BD step algorithms that are available for use with pscf_pc or pscf_pg 
are listed below, with each indicated by the name that would be used as 
the label of the BdStep parameter file block. Each such label is a 
clickable link to a file containing documentation of the algorithm and 
associated parameter file format.
<ul>
  <li> \subpage rpc_ExplicitBdStep_page "ExplicitBdStep" </li>
  <li> \subpage rpc_LMBdStep_page "LMBdStep" </li>
</ul>

\section psfts_param_montecarlo_sec Monte Carlo

The overall structure for a McSimulator block in a parameter file 
that enables Mc simulation may be described schematically as follows:
\code
  McSimulator{
    seed* int
    McMoveManager{ ... }
    Compressor#{..}
    AnalyzerManager*{ .... }
  }
\endcode
The only difference between this format for McSimulator and the
corresponding format for a BdSimulator is the existence of an 
McMoveManager block where a Bd simulation would have a selectable 
BdStep block. The McMoveManager contains information about the
set of MC moves that will be used during a simulation.

An McMoveManager is a container for a list of one one or more
MC moves that are chosen at random at the beginning of each step
of a simulation. It contains one or more subblocks that each
begin a line containing the name for a MC move type (which is 
also the name of the class that implements that move), each of
which contains parameters required to define the move. The first
parameter in the subblock associated with each MC move type is
a parameter named "probability" that gives the probability of
randomly choosing that move type at the beginning of any single
step.

The only types of move that are currently implemented in PSCF 
are a simple MC move named RealMove that applies independent
random changes to the exchange field values on all grid points,
and a "smart MC" or "force bias" move named ForceBiasMove that 
uses an explicit Euler BD step to generate a proposed MC move. 

Below, we show an example of an McSimulator block for a MC
simulation analogous to the BdSimulator block of the 
previous example:
\code
  McSimulator{
    seed           486893701
    McMoveManager{
      ForceBiasMove{
        probability  0.75
        mobility     4.0E-3
      }
      RealMove{
        probability  0.25
        A            0.15
      }
    }
    LrAmCompressor{
      epsilon      1.0e-4
      maxHist      40
    }
    AnalyzerManager{
      baseInterval    10

      HamiltonianAnalyzer{
        interval        10
        outputFileName  out/hamiltonian
        nSamplePerBlock 5
      }

      StepLogger{
        interval        20
      }

    }
  }
}
\endcode
The only difference between this McSimulator block and the BdSimulator 
block shown in the previous example of a BD simulation parameter file
is the appearance of a McMmoveManager block in this example where the
previous example contains a LMBdStep block that described the choice
of BD step algorithm. 

The McMoveManager block from the above example is show separately below:
\code
    McMoveManager{
       ForceBiasMove{
         probability  0.75
         mobility     4.0E-3
       }
       RealMove{
         probability  0.25
         A            0.15
       }
    }
\endcode
This block has subblocks labelled ForceBiasMove and RealMove, indicating
that the simulation will use both of the currently available move types.

The first parameter in each subblock is the "probability" parameter,
which is given a value of 0.75 for the ForceBiasMove and 0.25 for the
RealMove.  In this example, a ForceBiasMove is thus chosen with 75\% 
probability at the beginning of each step, and a RealMove is chosen with 
25\% probability.  

Other parameters of each MC move are required to specify the typical
magnitude of random changes.  The "mobility" parameter of the  
ForceBiasMove gives the value of the Brownian dynamics mobility 
parameter for the explicit Euler BD step that is used by this algorithm 
to generate a proposed MC move.  The parameter of a RealMove named "A" 
specifies the root-mean-squared change in the proposed value of the 
exchange field at each grid point.

<b> MC Move Algorithms: </b>
The MC move algorithms that are available for use with pscf_pc or pscf_pg 
are listed below. Each is indicated by the name that is used as the label 
of the corresponding parameter file block with the McMoveManager block. 
Each such label is a clickable link to a file containing documentation of 
the algorithm and associated parameter file format.
<ul>
  <li> \subpage rpc_ForceBiasMove_page "ForceBiasMove" </li>
  <li> \subpage rpc_RealMove_page "RealMove" </li>
</ul>

\section psfts_param_compressor_sec Compressor Algorithms

In both BD and MC simulations, the block that describes the sampling
algorithm (i.e., the BdStep or McMoveManager block) is followed by a 
selectable "Compressor" block. Users may choose from among several 
available compressor algorithms by using a block for which the first
line identifies one of the available algorithms, using a format for
the contents of the block appropriate to the chosen algorithm. 

The available compressor algorithms are listed below. Users may click
on the link associated with each algorithm label to access more a
detailed description of each the algorithm, and of the format of the 
associated parameter file block. 
<ul>
  <li> \subpage rpc_AmCompressor_page "AmCompressor" </li>
  <li> \subpage rpc_LrCompressor_page "LrCompressor" </li>
  <li> \subpage rpc_LrAmCompressor_page "LrAmCompressor" </li>
</ul>
The LrAmCompressor is the default choice, we may thus be selected
either by using the generic label "Compressor" or the more specific
label "LrAmCompressor" before the opening bracket in the first line 
of the associated parameter file block. 

\section psfts_param_analyzer_sec AnalyzerManager

<BR>
\ref psfts_algorithm_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_page            (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_command_page    (Next)

*/
