/*! \page psfts_param_page Parameter File

\ref psfts_algorithm_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_analysis_page    (Next)
<BR>

PSCF can perform partial saddle-point field theoretic simulation 
(PS-FTS) using either Brownian dynamics (BD) or Monte Carlo (MC)
sampling methods. Parameter file formats for these two types of
simulations share a common overall structure that is described 
in the remainder of this page, along with examples for both types
of simulation and discussion of the differences.

\section psfts_param_example_sec Example: BD Simulation

Shown below is an example of a complete parameter file for a BD
simulation of a symmetric diblock copolymer melt. Note that the
Mixture, Interaction and Domain blocks with contents very similar 
to those used for a corresponding SCFT calculation. Additional
information about algorithms used by the BD simulation are given
within the BdSimulator block.

\code
System{
  Mixture{
    nMonomer  2
    monomers[
             1.0  
             1.0 
    ]
    nPolymer  1
    Polymer{
      type    linear
      nBlock  2
      blocks[
              0   0.5
              1   0.5
      ]
      phi     1.0
    }
    vMonomer  0.01
    ds   0.02
  }
  Interaction{
    chi(
        1   0   18.0
    )
  }
  Domain{
    mesh         40    40    40
    lattice      cubic   
  }
  BdSimulator{
    seed           486893701
    LMBdStep{
      mobility  5.0E-2
    }
    LrAmCompressor{
      epsilon      1.0e-4
      maxHist      40
    }
    AnalyzerManager{
      baseInterval    10

      StepLogger{
        interval        20
      }

      HamiltonianAnalyzer{
        interval        10
        outputFileName  out/hamiltonian
        nSamplePerBlock 5
      }

    }
  }
}
\endcode
The above parameter file could be used without modification by either 
the pscf_pc or pscf_pg program, which provide nearly identical 
capabilities for PS-FTS calculations.

\section psfts_param_overview_sec Parameter File Structure (Overview)

A parameter file that enables either BD or MC PS-FTS calculations 
must begin with Mixture, Interaction and Domain blocks similar to those
used for an SCFT parameter file, as in the above example. The enable
stochastic simulations, the Mixture, Interaction, and Domain blocks must 
be followed by a selectable "Simulator" block, which may be either a 
"BdSimulator" block, to enable BD simulation, or an "McSimulator" block
to enable MC simulation.  The BdSimulator and McSimulator blocks use 
analogous but slightly different param file formats, because they 
contain computational parameters for different types of sampling 
algorithms.

The arrangement of the blocks in a typical parameter file for a PS-FTS
simulation performed using either pscf_pc or pscf_pg may thus be shown
in the following skeleton form:
\code
System{
  Mixture{ ... }
  Interaction{ ... }
  Domain{ ... }
  Simulator#*{ ... }
}
\endcode
Note that only the Mixture, Interaction, and Domain blocks are required. 
The Iterator and Sweep blocks that may be used for SCFT calculations 
are optional, selectable blocks that are normally omitted in parameter
files use for PS-FTS, and and so are not shown above. The "Simulator" 
block is optional, selectable block that is instead used only for FTS,
and so is normally omitted omitted in parameter files that are used to 
initialized SCFT calculations.

The typical format for a parameter file that enables Brownian dynamics 
FTS, but that not does enable SCFT, is thus, in skeleton form:
\code
System{
  Mixture{ ... }
  Interaction{ ... }
  Domain{ ... }
  BdSimulator{ ... }
}
\endcode
The corresponding format for a parameter file for MC simulation is:
\code
System{
  Mixture{ ... }
  Interaction{ ... }
  Domain{ ... }
  McSimulator{ ... }
}
\endcode
Formats of the various blocks of these skeleton are discussed below.

\section psfts_param_Mixture_sec Mixture, Interaction and Domain Blocks

The contents of the Mixture, Interaction, and Domain blocks in a 
parameter file for PS-FTS calculation are nearly identical to those
of corresponding blocks of an SCFT parameter file, except for the
following differences:

<ul>

<li>
**vMonomer** : The Mixture block used for a PS-FTS calculation must 
include a value for a parameter vMonomer that represents the monomer 
reference volume in an incompressible system.  This is an optional 
parameter is not normally needed for SCFT calculations, and so is 
usually omitted from SCFT parameter files.  In FTS, however, the value 
given for vMonomer determines the invariant degree of polymerization, 
and thus controls the magnitude of field fluctuations. The optional 
vMonomer parameter appears immediately after the Polymer blocks and 
Solvent blocks (if any) that describe the chemical constituents of 
the system. It appears just before the the ds parameter.  
If the vMonomer parameter is omitted, it is set to vMonomer = 1.0 by 
default, which is rarely what one wants.
</li>

<li>
** Unit cell** : The parameters required to describe a unit cell for 
a PS-FTS calculation are the same as those required by an SCFT 
calculation, but the interpretation is usually different.  In a FTS, 
the Domain block describes the overall periodic computational unit 
cell. In eitehr SCFT or FTS calculations, the type of the unit cell 
is specified in the parameter file, and unit cell dimensions are 
given in the header of the file containing the initial w fields. 
In FTS, these dimensions are usually taken to be large enough to 
contain multiple unit cells of any expected ordered microstructure,
where in SCFT calculations, they computational unit cell is often
designed to contain a single crystallographic unit cell. 
</li>

<li>
**Sspace group (absence)** : In a FTS, one generally does not impose 
any strict space group symmetry on the fields, since stochastically 
fluctuating fields will generally not exactly preserve any of the 
nontrivial space group symmetries characteristic of many SCFT 
solutions. The optional spaceGroup parameter of the Domain block is 
thus usually omitted from a parameter file for FTS. 
</li>

</ul>

The BdSimulator and McSimulator parameter blocks share a common 
internal structure, except for differences in the sub-block that 
specifies details of the BD or MC sampling algorithm. BD and MC 
simulations are described separately below.

\section psfts_param_brownian_sec Brownian Dynamics: BdSimulator Block

The overall structure for a typical BdSimulator block in a parameter 
file that enables BD simulation may be described schematically as 
follows:
\code
  BdSimulator{
    seed* int
    BdStep#{ ... }
    Compressor#{..}
    AnalyzerManager*{ .... }
  }
\endcode
The optional seed parameter may be used to set a seed for the random 
number generator. The BdStep, Compressor, and AnalyzerManager blocks 
contain parameters for, respectively, the BD step algorithm, the 
compressor algorithm, and any associated analysis operations.  Because 
the BdStep and Compressor blocks are selectable, the actual block label 
for these blocks may refer to the names of classes that implement 
particular choices of BD step algorithm and compressor algorithms, 
rather than the generic names BdStep and Compressor.  The AnalyzerManager 
block contains nested one or more nested subblocks for chosen analysis 
operations, as shown below.

For reference, here is the BdSsimulator block of the example given 
above :
\code
  BdSimulator{
    seed           486893701
    LMBdStep{
      mobility  5.0E-2
    }
    LrAmCompressor{
      epsilon      1.0e-4
      maxHist      40
    }
    AnalyzerManager{
      baseInterval    10

      HamiltonianAnalyzer{
        interval        10
        outputFileName  out/hamiltonian
        nSamplePerBlock 5
      }

      StepLogger{
        interval        20
      }

    }
  }
\endcode
In is example, the file indicates use of a Leimkuhler-Mathews (LM) 
Brownian dynamics step algorithm, as indicated by block label LMBDStep 
for the selectable BdStep block.
This file also chooses an LRAM compressor algorithm, as indicated by 
the block label LrAmCompressor for the selectable Compressor block.
We recommend these LM BD step and the LRAM compressor algorithm as the 
current methods of choice for almost all BD simulations.  These two
algorithms are also the default choices for the BdStep and Compressor, 
and so could also be selected using the generic "BdStep" and/or
"Compressor" labels for these two blocks.

<b> BD Step Algorithms: </b>
The BD step algorithms that are available for use with pscf_pc or pscf_pg 
are listed below, with each indicated by the name that would be used as 
the label of the BdStep parameter file block. Each such label is a 
clickable link to a file containing documentation of the algorithm and 
associated parameter file format.
<ul>
  <li> \subpage rpc_LMBdStep_page "LMBdStep" </li>
  <li> \subpage rpc_PredCorrBdStep_page "PredCorrBdStep" </li>
  <li> \subpage rpc_ExplicitBdStep_page "ExplicitBdStep" </li>
</ul>

\section psfts_param_montecarlo_sec Monte Carlo: McSimulator Block

The typical structure of the McSimulator block in a parameter file 
for MC simulation may be described schematically as follows:
\code
  McSimulator{
    seed* int
    McMoveManager{ ... }
    Compressor#{..}
    AnalyzerManager*{ .... }
  }
\endcode
The only difference between this format for McSimulator and the
corresponding format for a BdSimulator is the existence of an 
McMoveManager block in the McSimulator block where a Bdsimulator 
block would have a selectable BdStep block. 

The McMoveManager contains information about a set of MC moves 
that will be used during a simulation.
An McMoveManager is a container for a list of one one or more
MC moves that are chosen at random at the beginning of each step
of a simulation. The McMoveManager parameter file block contains 
one or more subblocks that each begin with a line containing the 
name for a specific MC move type. The name of each MC move type 
is also the name of the C++ class that implements that move. 
The block associated with each MC move type contains parameters
parameters required to define the move. The first parameter in 
the subblock associated with each MC move type is a parameter 
named "probability" that gives the probability of randomly 
choosing a move of that type at the beginning of each MC step.

The only types of move that are currently implemented in PSCF 
are a simple MC move named RealMove that applies independent
random changes to the exchange field values on all grid points,
and a "smart MC" or "force bias" move named ForceBiasMove that 
uses an explicit Euler BD step to generate a proposed MC move. 

Below, we show an example of an McSimulator block for a MC
simulation analogous to the BdSimulator block of the previous 
example:
\code
  McSimulator{
    seed           486893701
    McMoveManager{
      ForceBiasMove{
        probability  0.75
        mobility     4.0E-3
      }
      RealMove{
        probability  0.25
        A            0.15
      }
    }
    LrAmCompressor{
      epsilon      1.0e-4
      maxHist      40
    }
    AnalyzerManager{
      baseInterval    10

      HamiltonianAnalyzer{
        interval        10
        outputFileName  out/hamiltonian
        nSamplePerBlock 5
      }

      StepLogger{
        interval        20
      }

    }
  }
}
\endcode
The only difference between this McSimulator block and the BdSimulator 
block shown previously is the appearance of a McMmoveManager block 
where BD example contains a LMBdStep block that described the choice
of BD step algorithm. 

The McMoveManager block from the above example is show separately below:
\code
    McMoveManager{
       ForceBiasMove{
         probability  0.75
         mobility     4.0E-3
       }
       RealMove{
         probability  0.25
         A            0.15
       }
    }
\endcode
This block has subblocks labelled ForceBiasMove and RealMove, indicating
that the simulation will use both of the currently available move types.

The first parameter in each subblock is the "probability" parameter,
which is given a value of 0.75 for the ForceBiasMove and 0.25 for the
RealMove.  In this example, a ForceBiasMove is thus chosen with 75\% 
probability at the beginning of each step, and a RealMove is chosen with 
25\% probability.  

Other parameters of each MC move are required to specify the typical
magnitude of random changes.  The "mobility" parameter of the  
ForceBiasMove gives the value of the Brownian dynamics mobility 
parameter for the explicit Euler BD step that is used by this algorithm 
to generate a proposed MC move.  The parameter of a RealMove named "A" 
specifies the root-mean-squared change in the proposed value of the 
exchange field at each grid point.

<b> MC Move Algorithms: </b>
The MC move algorithms that are available for use with pscf_pc or pscf_pg 
are listed below, labelled by the name that is used in the first line of
a corresponding parameter file block. Further information about each
MC move type can be obtained by clicking on the associated link.
<ul>
  <li> \subpage rpc_ForceBiasMove_page "ForceBiasMove" </li>
  <li> \subpage rpc_RealMove_page "RealMove" </li>
</ul>

\section psfts_param_compressor_sec Compressor Block

In both BD and MC simulations, the block that describes the sampling
algorithm (i.e., the BdStep or McMoveManager block) is followed by a 
selectable "Compressor" block. Users may choose from among several 
available compressor algorithms, the name of which is always given 
by the first line in the associated block. 

The available compressor algorithms are listed below. Users may click
on the link associated with each algorithm label to access more a
detailed description of each the algorithm, and of the format of the 
associated parameter file block. 
<ul>
  <li> \subpage rpc_LrAmCompressor_page "LrAmCompressor" </li>
  <li> \subpage rpc_LrCompressor_page "LrCompressor" </li>
  <li> \subpage rpc_AmCompressor_page "AmCompressor" </li>
</ul>
The LrAmCompressor is the default choice, and is generally the most
efficient of these three options. The LrAmCompressor may thus be
either by using the generic label "Compressor" or the more specific
label "LrAmCompressor" in the first line of the associated parameter 
file block. 

\section psfts_param_analyzer_sec AnalyzerManager

In both BD and MC simulations, the selectable "Compressor" block 
is followed by an optional AnalyzerManager block. In the C++ source
code, the AnalyzerManager is a container for a list of one or more 
objects that each perform a statistical analysis or data output 
operation during a simulation.  These objects are instances of
subclasses of a base class named "Analyzer", and are generically
referred to in the PSCF source code and documentation as "analyzers".

The first parameter in an AnalyzerManager block is an int parameter 
called "baseInterval". This is followed by one or more subblocks 
that each specify a particular type of analyzer. The first parameter 
of each such subblock is an int parameter called "interval" that 
determines how often the analyzer is called. The interval parameter
for each Analyzer must be an integer multiple of the "baseInterval". 
The operation defined by each analyzer is performed when the 
internal counter that keeps track of the number of BD steps or
attempted MC moves is an integer multipe of its interval parameter. 

Below, we show the AnalyzerManager block for the BD simulation 
parameter file shown at the beginning of this page:
\code
    AnalyzerManager{
      baseInterval    10

      StepLogger{
        interval      100
      }

      HamiltonianAnalyzer{
        interval        10
        outputFileName  out/hamiltonian
        nSamplePerBlock 5
      }

    }
\endcode
In this example, the baseInterval is 10. After the baseInterval, the 
block contains subblocks for two analyzers named StepLogger and 
HamiltonianAnalyzer, each of which contains an "interval" parameter 
with a value that is an integer multiple of the baseInterval of 10.  
The StepLogger is a trivial analyzer that periodically outputs the 
current value of the BD or MC step counter to the standard output 
(i.e., to the screen, unless it is redirected).  The purpose of this 
is simply to record the progress of the simulation.  
The HamiltonianAnalyzer accumulates statistical information about 
the value of the field theoretic Hamiltonian, including the average 
value, the variance, and a reasonably sophisticated estimate of the 
statistical error on the average value. The outputFileName parameter 
gives the base name for a set of files to which the information 
accumulated by HamiltonianAnalyzer will be written. 

The parameter file block for most analyzers contains a string named 
outputFileName or something similar that specifies the name of a file 
to which results will be written. Different analyzers thus generally
write results to separate files. 

A list of all of the available analyzers, including links to detailed 
documentation, is given on the \ref psfts_command_page "next page" . 

<BR>
\ref psfts_algorithm_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_page            (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref psfts_analysis_page    (Next)

*/
