/*! \page developer_source_page Source File Directory

\ref developer_list_page  (Next)
<BR>


All C++ and C++/CUDA files for PSCF are in the src/ subdirectory of 
the root pscfpp directory.  

\section source_files_sec Source Files

All C++ files associated with a given class or set of functions are 
placed in the same directory and have the same base name.  The base 
name of a C++ file that defines or implements a class or class 
template is the same as the class name, followed by an extension to 
indicate file type.  All class names and corresponding file names are 
upper space camel (such as Pscf::Monomer).

PSCF uses the following file name extensions for source files:

   - Extension \*.h indicates a header file

   - Extension \*.tpp indicates the implementation of a class template

   - Extension \*.cpp indicates a compilable C++ file

   - Extension \*.cu indicates a compilable CUDA source file

\section source_namespaces_sec Namespaces and Subdirectories

The source code that is used to build PSCF is divided among two top-level 
namespaces, named Util and Pscf.  The Pscf namespace contains all of the 
source code that is specfic to the PSCF package, all of which is maintained 
on github in the dmorse/pscfpp repository.  The Util namespace instead
contains a collection of more general resources.

The Util namespace contains a collection of general utilities for 
scientific computation that is used by more than one project.  This 
code is maintained in a separate github repository (dmorse/util) and 
imported into the pscfpp repository as a git submodule. All source 
code files for entities that are defined in the Util namespace is
installed in the src/util directory. 

The Pscf namespace contains all C++ and CUDA code that is specific 
to the PSCF package. The Pscf namespace contains several enclosed 
namespaces. All source code for each such enclosed namespace is 
located within a specific subdirectory of the src/ directory, as
discussed below.

The main subdirectories of src/ and corresponding namespaces are:

 - src/util/ contains all code in the Util namespace

 - src/pscf/ contains code defined directly in the Pscf namespace, 
   which is accessible to all PSCF programs.

 - src/prdc/ contains all code in the Pscf::Prdc namespace, which is used
   by both the pscf_pc and pscf_pg programs for periodic structures.

 - src/r1d/ contains all code in the Pscf::R1d namespace, which is only
   used within the pscf_1d 1D finite element program.

 - src/rpc/ contains all code in the Pscf::Rpc namespace, which is only
   used within the pscf_pc C++ CPU program for periodic structures.

 - src/rpg/ contains all code for the Pscf::Rpg namespace, which is
   used within the pscf_pg CUDA GPU program for periodic structures.

These six directories will be referred to in what follows as "namespace"
level subdirectories of src/.  The PSCF makefile system constructs a
static library in each of these namespace level directories that contains
compiled code for all of the classes and global functions defined in that
directory. The src/r1d, src/rpc, and src/rpg each also contain one main
program source file that is also compiled and installed by the build 
system.

\section source_unittests_sec Unit Tests

Each of the six namespace level sub-directories of the src/ directory
contains a subdirectory named tests/ that contains unit tests for classes 
defined in the associated name space. These unit tests are not 
automatically compiled or run by the build system that compiles the 
source code. All of the tests associated with a given namespace level 
directory can be compiled and run by entering "make run" from within 
the appropriate tests/ directory.

Source code for a general unit testing framework is located in the 
src/test directory. This is a header-only C++ framework in which all 
classes are defined outside of any namespace. This unit testing framework 
used by PSCF is maintained on github in a separate repository (dmorse/test) 
and is imported into pscfpp as a submodule.


<BR>
\ref developer_page  (Up)  &nbsp; &nbsp; &nbsp; &nbsp;
\ref developer_list_page  (Next)

*/
