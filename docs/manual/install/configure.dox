/*! \page install_configure_page Optional Features

\ref install_targets_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_doc_page (Next)
<BR>

The PSCF build system is designed to allow users to enable or disable
conditional compilation of optional features during compilation.
Thus far, the only such optional feature is the "debugging" feature that
is used to add additional run-time sanity checks (such as run-time
checking of array index bounds) at a slight cost in performance. The
system used to enable and disable this feature is designed to be 
flexible enough to allow later additional of other optional features.

\section install_configure_configure The "configure" script

The pscfpp/src and pscfpp/bld directories are used as build directories
for in-source and out-of source compilation, respectively. After the setup
script has been run, each of these two standard build directories will
contain a unix bash script named "configure". The configure script can
be used to modify configuration files that control what features are
enabled when code is compiled.  The configure script in each build
directory must be invoked from the directory that contains the script
(which is the root of the src/ or bld/ directory tree) before invoking
the "make" utility to actually compile code.

\subsection install_configure_change_sub Enabling/disabling Debugging

The "debugging" feature is enabled or disabled by invoking configure
script with the "-d" option with an option parameter "1" to enable
or "0" to disable, before compiling source code.
To enable debugging in the code built in one build directory one would
enter
\code
./configure -d1
\endcode
from the root of the relevant build directory (i.e., from src/ or bld/).
To disable debugging before compiling, one would instead enter
\code
./configure -d0
\endcode
These commands change the configuration used during compilation, and
so must be invoked before compiling any relevant source code.

\subsection install_configure_query_sub The "query" option

The -q command line option of the configure script may be used to query
what optional features are currently set to be enabled or disabled the
next time the code is compiled.  To see how this works, changed
directory (cd) to the bld/serial directory and then enter
\code
./configure -q
\endcode
This should result in the output
\code
-d  OFF - debugging
\endcode
if debugging is disabled (the default configuration), or
\code
-d  ON - debugging
\endcode
if debugging has been enabled.

\subsection install_configure_help_sub The "help" option

Invoking the configure script with the -h ("help") option, by entering
\code
./configure -h
\endcode
produces a list list of all command line options accepted by the script.

\section install_configure_build_directories_section Build configuration files

The configuration of the build system is actually defined by the contents
of a set of files named "config.mk" in the src/ and bld/ directories.
These files, which we refer to as build configuration files, are makefile
fragments that are included by other makefiles during the build process. The
configure script works by editing the build configuration files.  Users may
also edit these files directly if they are comfortable doing so.

The directories src/ and bld/ contain analogous directory structures, and
similar sets of build configuration files.  In what follows, we will refer
to src/ and bld/ generically as build directories. Both of these directories
contains a set of five subdirectories named util/, pscf/, fd1d/, pscpc/, and
pspg/ that each contain C++ source files from a single C++ namespace. We
refer to these top-level subdirectories of bld/ and src/ as "namespace-level"
subdirectories.

After the setup script has been run, each build directory will contain 6
build configuration files files named "config.mk", with one in the root
of the build directory (i.e., in src/ and bld/) and one in each of the 5
namespace-level subdirectories of that directory.
The config.mk file in the root directory of each build directory tree
is the main build configuration file for code built in that directory.
This file controls the choice of compiler and general options that are
applied to all code.  The config.mk files in the namespace level
directories specify more specialized options that are only relevant for
code in specific namespaces. The six config.mk files in each build
directory together specify the configuration of any code that is
compiled in that directory tree.

<BR>
\ref install_targets_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_doc_page (Next)
*/
