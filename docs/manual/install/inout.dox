/*! \page install_inout_page Out-of-Source and In-Source Builds

\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_targets_page (Next)
<BR>

\section install_inout_build Intermediate Files and Build Directories

When the PSCF makefile system compiles a program or set of programs, it
generates a large number of intermediate files that are to needed to
construct the final executable program files. These intermediate files
include:

   - An object file with a file extension *.o that is associated with each
     compilable source file (with extension *.cpp or *.cu), which has the
     same base file name as that of the source file. Each object file is
     created by compiling the associated source file.

   - A dependency file with file extension *.d associated with each
     source file, which is generated by analyzing which header (*.h)
     files are included directly or indirectly into that source file
 
   - Several static libraries with extension *.a, each of which contains
     all of the object code generated by compiling the source files in
     a subdirectory of pscfpp/src.

During compilation, all of these intermediate files are placed in a
directory that we will refer as the "build" directory.

All C++ header and source files for PSCF are contained in the pscfpp/src/
directory tree. The build directory used by PSCF may either be the same
as the src/ directory or it may be a separate directory, depending on
whether the code is compiled "in-source" or "out-of-source".  When PSCF
is built "in-source", each *.o and *.d file that is created by
compiling a source file (extension *.cpp or *.cu) is placed in the same
directory as the corresponding source file.  When PSCF is instead built
"out-of-source", these intermediate files are instead placed in an
equivalent location in a separate build directory tree with the same
directory structure.  By default, pscfpp/bld is used as the build
directory tree for out-of-source builds. All executable program files
are installed in the pscfpp/bin directory, for either in-source or
out-of-source compilation.

We refer to the two directories src/ and bld/ in what follows as standard
build directories.  The bld/ directory has a directory structure analogous
to that of the src/ directory. Both src/ and bld/ contain a set of
subdirectories named util/, pscf/, fd1d/, pspc/, and pspg/, which we
refer to in what follows as namespace level directories.

\section install_inout_out Out-of-Source Builds

We recommend that most users build PSCF out-of source. The overview
of instructions given in a \ref install_overview_page "previous page"
were instructions for performing an out-of-source build. An out of
out-of-source build will be performed if commands "make all-cpu" and
"make pspg" are invoked from either the root pscfpp/ directory (as
recommended in those instructions) or from the pscfpp/bld directory.

\section install_inout_in In-Source Builds

In order to compile and build PSCF in-source, one simply invokes the make
utility from within the pscfpp/src/ directory, rather than from within the
pscfpp/ directory or the pscfpp/bld/ directory.  The names of the makefile
targets used for this purpose are the same as those used to build
out-of-source.  Entering the command "make all-cpu" from the pscfpp/src
directory will thus perform an in-source build all of CPU programs in the
PSCF package, and install the resulting executable files in pscfpp/bin.
Entering "make pspg" from pscfpp/src on a machine with a CUDA compiler
will compile all GPU enabled executables, which are also installed in
pscfpp/bin.

When compiling in-source, the make command can also be invoked from any
subdirectory of the src/ directory in order to compile only recently
modified files in that subdirectory. This usage, which is provided as
a convenience for developers, is discussed in more detail
\ref install_targets_makeall_sec "here".  We recommend an out-of-source
build for users who are not actively working on code development and
are simply compiling one or more of the PSCF programs unchanged.

<BR>
\ref install_setup_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp;
\ref install_targets_page (Next)
*/
