/*! \page user_param_sweep_page 3.3.5 Parameter Sweeps

\ref user_param_mixture_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_fd_page       (Next) 
<BR>

Some of the PSCF programs provide capability to run a sequence of SCFT
simulations at slightly different conditions corresponding to points on
a line through the space of possible input parameter values. We refer 
to this kind of calculation as a "sweep".  All of the PSCF programs can 
perform sweep operations.

\section user_param_sweep_definition Sweep Concept

To perform a sweep, the program attempts to solve a sequence of SCFT problems 
for choices of input parameters (e.g., block lengths, chi parameters, species
volume fractions, etc.) that are spaced lie along a line through the space of 
possible values for these parameters. During a sweep, the resulting SCFT 
problems are solved in the sequence that they appear along this line. An 
initial guess for the vector of unknown variables for every point after the 
first one is obtained by extrapolating from solutions obtained at one or more
immediately preceding points along this line.

To define a sweep, a path through parameter space is defined by defining
how one or more input parameters vary as a function of a contour variable 
denoted by s. By convention, s is taken to vary from 0 to 1 over the length
of a sweep. The number of SCFT calculations performed along that line is 
determined by an integer parameter denoted by ns.  SCFT calculations are 
performed at ns+1 evenly spaced values of s given by s = i/ns, for integer 
i = 0, ..., ns + 1.

The simplest possible type of sweep is a linear sweep in which only one 
input parameter varies, and in which that parameter is a linear function 
of s. For example, one might do a linear sweep of a single element of the
chi parameter matrix over a set of evenly spaced values between an 
initial and final value. 

A general linear sweep is one in which several input parameters may be 
varied simultaneously, and in which each of the affected parameters is a 
linear functions of s.  Every pscfp program can perform a general linear
sweep of this type. 

\section user_param_sweep_param_sec Parameter File 

The parameter file for a calculation in which a sweep will be performed
must include an optional block that describes the nature of the sweep. 
This block, when present, must appear after the block that specifies the 
iterator algorithm. The skeleton structure for a paramater file for a 
calculation that includes a sweep is shown below:
\code
System{
  Mixture{
     ...
  }
  Interaction{
     ...
  }
  Domain{
     ...
  }
  Iterator#{
     ...
  }
  Sweep#{
     ...
  }
}
\endcode
In this description, the Iterator and Sweep blocks include a # suffix
to indicate that these are both selectable blocks. Different options
for the Sweep block can define different types of paths through 
parameter space. 

Below, we show an example of a pscf_fd parameter file that extends the
example parameter file shown \ref user_param_example_page "previously" 
by appending a Sweep parameter file block to the end of the main System 
block, using the default algorithm.
\code
System{
  Mixture{
     nMonomer   2
     monomers[
                1.0  
                1.0 
     ]
     nPolymer   2
     Polymer{
        nBlock  2
        blocks[
                0   0.5
                1   0.5
        ]
        phi     0.6
     }
     Polymer{
        type    linear
        nBlock  1
        blocks[
                0   1.0
        ]
        phi     0.4
     }
     ds   0.01
  }
  Interaction{
     chi(
           0    1    10.0
     )
  }
  Domain{
     mode     planar
     xMin     0.0
     xMax     8.0
     nx       401
  }
  NrIterator{
     epsilon   0.00000001
  }
  Sweep{
     ns               10
     baseFileName     out/
     nParameters      2
     parameters[
        chi            0     1    5.0
        block          1     0    0.3
     ]
  }
}
\endcode
The only new element in this example is the Sweep block, which is discussed
below.

\section user_param_sweep_command_sec SWEEP Command

A sweep is actually performed by including a command name "SWEEP" in
the command file. The SWEEP command does not take any parameters, and
performs the sequence of calculations described in the Sweep block of 
the parameter file. The SWEEP block must appear after a command that
initializes the w files with an initial guess for the solution of the
first point of the sweep.
 
\section user_param_sweep_linear_sec LinearSweep

The default implementation of sweep for all PSCF programs is a general 
linear sweep algorithm. This algorithm may be selected by using the 
label "Sweep" preceding a curly bracket in the first line of a sweep
block, as done in the above example. A version of this algorithm is 
implemented for each PSCF program by a class named LinearSweep. This
algorithm can be selected by including a Sweep block with the appropriate
format that starts either with a line containing the generic name Sweep
(to select the default algorithm) or LinearSweep (to explicitly select
this algorithm). 

<i> 
Technical note: Source code files that are specific to different PSCF 
programs are defined in different C++ namespaces. This allows classes 
that play analogous roles in different programs but that differ in some 
details to be given the the same name. The LinearSweep classes for the 
pscf_fd, pscf_pc and pscf_pg programs are actually different 
classes defined in different namespaces that have identical or nearly 
identical user interfaces and implement completely analogous algorithms. 
The common user interface for these classes is described here. </i>

Here parameter file format for a LinearSweep is summarized below:
\code
   LinearSweep{
       ns              int
       baseFileName    string
       nParameter      int
       parameters      Array [ SweepParameter ]
   }
\endcode
The purpose of the parameters in this block are explained below:
<table>
  <tr>
    <td> <b> Label </b>  </td>
    <td> <b> Description </b>  </td>
  </tr>
  <tr>
    <td> ns </td>
    <td> number of step changes in the parameter values </td>
  </tr>
  <tr>
    <td> baseFileName </td>
    <td> 
    string that is added as a prefix to the names of all files 
    output during the sweep. </td>
  </tr>
  <tr>
    <td> nParameter </td>
    <td> number of parameters that are modified during the sweep </td> 
  </tr>
  <tr>
    <td> parameter </td>
    <td> array in which each element specifies the magnitude of
         the change in one modified parameter over the course of 
         the sweep. </td>
  </tr>
</table>
Comments:

   - The parameter ns is one less than the number of SCFT calculations 
     that must be performed including the initial and final state.
     Because ns = 10 in the above example, SCFT calculations will be
     performed at 11 state points, including both end points.

   - Several output files are output at the end of each SCFT calculation
     that contain information about the parameters, thermodynamic 
     properties and converged chemical potential fields obtained at
     each state point. The names of these files are automatically
     generated using the value of the string parameter baseFileName
     as a common prefix to all of these file names. The use of a
     baseFileName = "out/" in the example would cause all of these 
     output files to be written to a subdirectory of the current
     working directory named "out". 

   - The array parameters contains nParameter entries, each of which
     corresponds to one parameter that should be modified during the
     sweep. Parameters that are not listed in this array are unmodified.

In this example, the elements of the parameters array tell the program 
to increase the the initial value of chi(0,1) by 5.0 in 10 increments, 
to also increase the length of block 0 of polymer 1 (the homopolymer) 
by 0.3. Values of all parameters at the initial state (corresponding
to s=0) are given by the values that were set before the sweep began.

The "parameters" array must contain exactly nParameter entries, each
on a separate line. Each entry in this array contains the data required
to a create an object of type SweepParameter that described how one
input parameter should be modified. 

The file format each line of the "parameters" array (corresponding to
a single parameter) contains an identifier for a specific input 
parameter followed by amount by which the value of that parameter 
should change over the course of the sweep.  The parameter identifier 
in each such entry contains a name string that identifies the type of 
variable, such as "block" for a block length or "chi" for an interaction 
parameter. This string is followed by either one or two integer indices 
that specify which variable of that type should be changed.  For example, 
the string "block" must be followed by two integers, the first being an
index for the polymer species the block belongs to, and the second  
being an index for that block within that polymer. Some other types of 
parameter can be uniqued identified using only a single index. For 
example the description of a parameter that specifies a volume 
fraction or chemical potential of a polymer or solvent molecular species 
requires a single index to identify the polymer or solvent species of 
interest.

The general format for a line in the parameters array for a parameter
that is specified by two indices is:
\code
     type   id0    id1    change
\endcode
where "type" denotes the parameter type identifier string (e.g., block or 
chi), "id0" and "id1" denote associated integer indices, and "change" is a 
real number that specifies the total amount that the specified parameter 
should be changed over the course of the sweep. The format for a parameter 
that has only one associated index (such as a molecular volume fraction)
simply omits the second integer index.

The table shown below gives all allowed values for the parameter type 
string identifer for a LinearSweep for a periodic microstructure with
with the number and meaning of any associated index or indices. All 
but one of these types of parameter are also valid in a linear sweep
performed by pscf_fd one-dimensional finite difference program, as
discussed below.  To indicate the meaning of each index in this table, 
we use the following notation:

   - mId denote a monomer type index
   - pId denotes a polymer species index
   - bId denote the index of a block within a polymer
   - sId denotes a solvent species index
   - uId denotes an index for a unit cell parameter for a periodic
     structure.

If only one index is required for a particular parameter type, then no 
entry is is given for the the second index.
<table>
  <tr>
    <td> Type         </td><td> Meaning                    </td>
    <td> id0        </td><td> id1 </tr>
  <tr>
    <td> kuhn         </td><td> monomer segment length     </td>
    <td> mId          </td> <td>      </td> 
  </tr>
  <tr>
    <td> chi          </td><td> Flory-Huggins parameter    </td>
    <td> mId          </td><td> mId   </td> 
  </tr>
  <tr>
    <td> block        </td><td> block length               </td>
    <td> pId          </td><td> bId   </td>
  </tr>
  <tr>
    <td> solvent      </td><td> solvent size               </td>
    <td> sId          </td><td>       </td>
  </tr>
  <tr>
    <td> phi_polymer  </td><td> polymer volume fraction    </td>
    <td> pId          </td><td>       </td>
  </tr>
  <tr>
    <td> mu_polymer   </td><td> polymer chemical potential </td>
    <td> pId          </td><td>       </td>
  </tr>
  <tr>
    <td> phi_solvent  </td><td> solvent volume fraction    </td>
    <td> sId          </td><td>       </td>
  </tr>
  <tr>
    <td> mu_solvent  </td><td> solvent chemical potential  </td>
    <td> sId         </td><td>        </td>
  </tr>
  <tr>
    <td> unit_cell   </td><td> unit cell parameter  </td>
    <td> uId         </td><td>        </td>
  </tr>
</table>
The two indices for a Flory-Huggins chi parameter refer to indices in 
the chi matrix maintained by Interaction. Changes to element chi(i, j) 
automatically also update chi(j, i) for i !\ j, thus maintaining the 
symmetry of the matrix.

The only type of parameter change listed above that is not applicable
to one-dimensional simulations performed by pscf_fd is the unit_cell
type. In a calculation for a periodic structure performed using a
pscf_pc or pscf_pg program, a "unit_cell" parameter is one of the 
parameters that determine the the size and shape of the crystal unit 
for a system of specified latttice type, such as the length of each
edge of a cubic unit cell, or the lengths of the three edges of an
orthorhombic crystal, or the value of the angle between two edges for
a non-orthogonal crystal type.  PSCF uses a set of standard conventions 
for a list of parameters required to describe each unit cell type for 
1, 2 and 3 dimensional structures, as described here.
A unit_cell parameter can only be changed explicitly in calculations 
in which each SCFT calculation is carried out in a rigid unit cell,
rather than a calculation using a flexible unit cell in which the
unit cell parameters are adjusted to minimize the free energy density.

<BR>
\ref user_param_mixture_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_page         (Up)   &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_fd_page      (Next) 

*/
