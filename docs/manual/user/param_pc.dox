/*! \page user_param_pc_page 3.3.7 pscf_pc (Periodic Problems, CPU)

\ref user_param_fd_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_pg_page  (Next)
<BR>

The pscf_pc and pscf_pg programs for periodic systems use nearly identical
parameter file formats, and so are discussed together here.

\section user_param_pc_example_sec Example
An example of a parameter file for the program pscf_pc3D is shown below. 

\code
System{
  Mixture{
    nMonomer  2
    monomers[
              A   1.0  
              B   1.0 
    ]
    nPolymer  1
    Polymer{
      type    linear
      nBlock  2
      blocks[
              0  0.25
              1  0.75
      ]
      phi     1.0
    }
    ds   0.01
  }
  Interaction{
    chi(
          1   0   20.0
    )
  }
  Domain{
    mesh             32  32  32
    lattice          cubic    
    groupName        I_m_-3_m
  }
  Iterator{
    maxItr       100
    epsilon      1e-10
    maxHist      50
    isFlexible   1
  }
}
\endcode

\section user_param_pc_system_sec File Format

The main System block of a parameter file for any of the pscf_pc and 
pscf_pg programs for has the same overall structure as that used by 
pscf_fd program, and is described by the same format skeleton:
\code
System{
  Mixture{ ...  }
  Interaction{ ...  }
  Domain{ ...  }
  Iterator#{ ... }
  Sweep#*{ ... }
}
\endcode
As for pscf_fd, the Sweep block is optional, and Iterator and Sweep blocks 
(if present) are both selectable blocks.  The purposes of these top-level 
blocks have all been discussed previously in the discussion of pscf_fd, and 
will not be repeated here.  Formats of the Mixture and Interaction blocks 
are the same for all PSCF programs, and so have also been discussed 
previously. Below, we discuss the contents of the Domain, Iterator, and 
Sweep blocks.

\section user_param_pc_domain_sec Domain Block

The Domain block contains information required to describe both unit 
cell of the periodic structure, the regular mesh that is used to 
discretize fields within each unit cell, and the space group of the 
desired solution.
The parameter file format is discussed below, as well as in separate
page \subpage pspc_Domain_page "here". 

An example of the format of this block is shown below:
\code
  Domain{
    mesh        32  32  32
    lattice     cubic  
    groupName   I_m_-3_m
  }
\endcode
The unitCell, mesh and groupName parameter lines are discussed separately 
below.

<b> mesh  </b>

The value of the variable "mesh" is a vector of integers that specifies 
the number of grid points along each direction of the uniform spatial 
mesh used to discretize fields within each unit cell of the crystal.  
The format is
\code
   mesh   N[0] .... N[D-1]
\endcode
where D is the dimension of space (i.e., the number of periodic 
directions), and N[i] is the number of grid points along axis number i, 
for i = 0,...,D-1. 

The dimensions N[0], \ldots, N[D-1] of the mesh are set in the parameter 
file during the initialization process and cannot be changed thereafter,
except by rerunning the program with a modified parameter file. 

<b> lattice </b>

The value of the parameter "lattice" is given by string that specifies the 
desired crystal system type.  The set of allowed values for this string 
depends on the dimensionality of space.  There are 7 allowed values of the 
"value" string for a 3D structure, corresponding to the types of 3D crystal 
system, with names given by the strings "cubic", "tetragonal", 
"orthorhombic", "hexagonal", "rhombohedral", "monoclinic", and "triclinic".
The allowed values for a 2D system include "square", "rectangular", 
"hexagonal" "rhombic" and "oblique".  The only allowed value for 1D 
system is "lamellar". A more detailed discussion of each of the possible 
lattice systems is given in a separate page that describes conventions 
for \ref user_unitcell_page "unit cells".

To completely specify the Bravais lattice for a crystal, one must 
specify values for one or more parameters that give the lengths of
the edges of the unit cell (or the Bravais lattice vectors) and the
angles between some edges. The number of required unit cell parameters 
is different for different choices of lattice system. For example a
3D cubic crystal requires only one parameter, which gives the length
of any edge of a cubic unit cell, while an orthorhombic unit cell 
requires 3 parameters to specify the lengths along three directions,
while a triclinic cell requires 6 parameters to specify 3 indepenent
unit cell lengths and three indepent angles. The meanings of all of
the parameters in the required list of unit cell parameters is 
described for each crystal system in the page about
\ref user_unitcell_page "unit cells".

Values for unit cell parameters are not specified in the parameter file 
of a PSCF program. Values of unit cell parameters are instead specified 
within the header of any file that describes a field, which are read by 
any commands that cause the program to read in a field.  Values for unit 
cell parameters are thus usually initialized by the first command in
the command file that causes the program to read a field file.  There is
a command named SET_UNIT_CELL that a user can use to manually set or 
reset the unit cell parameters during the processing of the command 
file without reading values from a field file. 

The unit cell parameters for a crystal may be changed multiple times
during program execution, but the choice of lattice system given in
the parameter file may not be changed after it is initialized.

<b> groupName </b>:

The value of the string parameter "spaceGroup" must be an standard
identifier for the crystallographic space group of the desired 
structure. 
Each of the allowed values of the groupName string corresponds to a 
modified version of the name of the space group, as listed in the 
international tables of crystallography. In the above example, the 
groupName string I_m_-3_m is a modified form of the name 
\f$Im\overline{3}m\f$ for the space group for a BCC lattice.  
Identifiers for crystallographic space groups are discussed and
listed \ref user_groups_page "here". 

The groupName is used to look up and read a representation of a 
space group that is used to generate a symmetry-adapted Fourier
basis in which every basis function is invariant under all the
elements of the specified space group. The algorithm used to 
construct this basis requires knowledge of a set of initial values 
for the unit cell parameters. The basis is thus normally constructed
immediately after the first time unit cell parameters are 
initialized, e.g., by reading the values given in a file that 
contains a description of a field. 


\section user_param_pc_Iterator_section Iterators

The default Iterator for the pscf_pc and pscf_pg programs uses an 
Anderson-Mixing (AM) iterator algorithm. This can be invoked using 
either the generic label "Iterator" or the specific label "AmIterator".  
The only other iterator currently available is an Anderson-Mixing 
iterator designed specifically for problems in which a polymer melt or 
mixture is confined to a thin film (see \ref user_thin_films_page ). 

Descriptions of the parameter file formats for the available iterators
can be found by following the links in the table below:
<table>
  <tr>
    <td> Label </td>
    <td> Description  </td>
  </tr>
  <tr>
    <td> \subpage pspc_AmIterator_page "AmIterator" </td>
    <td> Anderson Mixing iterator for periodic structures.  </td>
  </tr>
  <tr>
    <td> \subpage pspc_AmIteratorFilm_page "AmIteratorFilm" </td>
    <td> Thin Film Anderson Mixing iterator. Uses the Anderson Mixing 
         algorithm to solve the SCFT equations for a system that is
         confined to a thin film. </td>
  </tr>
</table>

\section user_param_pc_sweep_sec Sweep

The only sweep algorithm currently avaiable for use with pspc_pc is a
general linear sweep algorithm. This can be invoked by including a block 
that starts either with the generic label Sweep or the specific label 
LinearSweep.  The required parameter file format for a linear sweep has 
been described \ref user_param_sweep_linear_sec "here". 

<BR>
\ref user_param_fd_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_page     (Up)   &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_pg_page  (Next)

*/
