/*! \page user_param_mixture_page 3.3.4 Mixture Block

\ref user_param_format_page   (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_sweep_page    (Next) 
<BR>

The first subblock of the main System block in every parameter file is labelled Mixture.  
The Mixture block describes the chemical composition of the system that is being simulated. 

PSCF programs are designed to treat a mixture that may contain one or more polymer species and zero or more solvent point-particle species.
Each polymer may be either a linear or acyclic branched block polymer.
Polymers and solvents are both built from a palette of a nMonomer monomer types. 
Each monomer is assigned a statistical segment length.
Each copolymer block and each solvent species is assigned an index in the 
range [0,..,nMonomer-1] that specifies the type of monomer from which it 
is constructed.
The Mixture block contains information that specifies the structure of
each polymer species within the mixture, the monomer type and volume of
each solvent species, and the composition of the mixture.

The Mixture block in the parameter file for any pscf program has the format
\code
Mixture{
  nMonomer   int
  monomers   Array [ real ]
  nPolymer   int
  Polymer{ ... } 
    ...
  nSolvent*  int (0 by default)
  Solvent*{ ... }
    ...
  vMonomer*  float (1.0 by default)
  ds         float
}
\endcode
The asterisk after nSolvent indicates that it is a optional parameter,
which is set to 0 by default.
The number of Polymer subblocks must equal nPolymer, and the number of Solvent subblocks must equal nSolvent (i.e., so Solvent subblocks may be included if the nSolvent parameter entry is ommitted).

The meanings of parameters and purposes of subblocks are described in the table shown below. 
<table>
  <tr>
    <td> <b> Label </b>  </td>
    <td> <b> Description </b>  </td>
  </tr>
  <tr>
    <td> nMonomer </td>
    <td> Number of distinct monomer types in the mixture </td>
  </tr>
  <tr>
    <td> monomers </td>
    <td> 
    A 1D array of nMonomer elements in which the value of each element is the statistical segment length of the associated monomer type.
  </tr>
  <tr>
    <td> nPolymer </td>
    <td> The number of polymer species. This is a required positive integer.    </td> 
  </tr>
  <tr>
    <td> nSolvent* </td>
    <td> The number of solvent (point-particle) species. 
         This is an optional non-negative parameter, which is set to zero
         by default. </td>
  </tr>
  <tr>
    <td> Polymer{ ... } </td>
    <td> 
       Each Polymer{ ... } subblock contain data for one Polymer species.  
       The Mixture block must contain exactly nPolymer such subblocks 
       immediately after the nPolymer and nSolvent parameters.
    </td>
  </tr>
  <tr>
    <td> Solvent{ ... } </td>
    <td> Each Solvent{ ... } subblock contains data for one point-like 
         Solvent species.  The number of solvent subblocks must equal
         nSolvent.
    </td>
  </tr>
  <tr>
     <td> ds </td>
     <td> Preferred value for the block length step size used to 
          integrate the modified diffusion equation within each block.
          </td>
  </tr>
  </tr>
</table>

Monomer types are implicitly assigned integer identifiers in the order in which they appear in the monomers array. We thus assign an index 0 to the first monomer type, and index 1 to the second, and so on.  
These integer monomer type indices are used to identify the monomer types associated with each blocks of a block polymer and each solvent type.

Polymer and Solvent species are also assigned integer labels in the order in which object of a particular type appear in the parameter file.
The the first polymer is thus assigned an index 0, the second an index 1, etc.
Similarly, the first solvent species (if any) is assigned an index 0, etc.
 
\section user_param_polymer_sec Polymer Block

Each Mixture block contains one or more Polymer sublocks, each of which 
contains information about a specific polymer molecules species. The 
format for a polymer block is
\code
    Polymer{
        type*  string  ("linear" or "branched", linear by default)
        nBlock int
        blocks Array [ Block ] (nBlock elements)
        phi*  real  (in range [0,1])
        mu    real  (required iff phi is omitted)
    }
\endcode
The meaning of different parameters is summarized in the table below:
<table>
  <tr>
    <td> <b> Label </b>  </td>
    <td> <b> Description </b>  </td>
  </tr>
  <tr>
    <td> type </td>
    <td> optional string identifier with allowed values "linear" or 
         "branched", which is set to "linear" by default.  </td>
  </tr>
  <tr>
    <td> nBlock </td>
    <td> Number of blocks in a block polymer. </td>
  </tr>
  <tr>
    <td> blocks </td>
    <td> Array in which each element contains a description of one
         block, represented internally by an object of type "Block".
    </td> 
  </tr>
  <tr>
    <td> phi* </td>
    <td> Volume fraction of this species (optional).  </td>
  </tr>
  <tr>
    <td> mu* </td>
    <td> Chemical potential of this species (must be present
         if and only if phi is absent). </td>
  </tr>
</table>

Comments:

The "type" string is an optional parameter that can be assigned values
"linear", to specify a linear block polymer, or "branched" to specify
an acyclic branched block polymer. 

The last entry a polymer block must be either a value for phi, which 
is the volume fraction occupied by the polymer species, or mu, which 
is the chemical potential for that species. The file must contain one 
or the other of these elements but not both.

In the parameter file format for the array blocks, each line of data
contains a description of one block of a block polymer, listed in the
order of increasing block index.  The description of each block is
stored internally in an object of type "Block", as indicated by the
notation "Array [ Block ]" in the above format description. The
required text representation for a Block is different depending on 
whether the value of the type parameter for the polymer is "linear" 
(the default) or "branched". These two cases are discussed separately 
below:

\subsection user_param_block_linear_sub Linear Polymers

If the polymer type is linear, then blocks are listed in the order in 
which they appear along the polymer, starting from one end. In this 
case the data required in each line of the blocks array is of the form
\code
      monomerTypeId  length
\endcode
where monomerTypeId is an integer and length is a real number.
Here, monomerTypeId is monomer type index for monomers in the block, 
while length is the length of the block. The "length" of a block is
defined in PSCF to be the ratio of the steric volume of the block to 
a monomer reference volume. 

\subsection user_param_mixture_block_branched_sub Branched Polymers

If the polymer type id branched, then the information in the blocks
array of a Polymer block must specify the topology of the polymer 
as well the monomer type and length of each block. A branched block 
polymer is described in PSCF as a acyclic graph consisting of nBlock 
edges (each of which corresponds to a block) that each terminate at 
two vertices.  In this description, each free chain end and each 
junction at which two or more blocks meet is described as a "vertex".  
For example, a linear block polymer with nBlock blocks contains two 
chain ends and nBlock - 1 junctions, giving nBlock + 1 vertices. A 
standard theorem of graph theory tells us that an acyclic graph with 
N edges always has exactly N+1 vertices. As a result, we know that 
any acyclic block polymer with nBlock blocks has exactly nBlock + 1 
vertices. In the description of polymer structure used by PSCF, 
each vertex is implicitly assigned a unique integer vertex index in 
the range [0, nBlock], each block is assigned a unique index in the
range [0, nBlock-1]. Each block is then connected to two labelled 
vertices, each of which may be either a junction or chain end. 

The data format for a block in a branched polymer is of the form
\code
    monomerTypeId  length   vertexId0   vertexId1
\endcode
Here, vertexId0 and vertexId1 are the indices for the two vertices 
that terminate the block, while monomerTypeId and length have the 
same meanings as for a linear polymer.

Example: As a simple example, consider a pure melt of pure ABC star 
terpolymer in which each polymer contains three chemically distinct 
blocks connected at a central junction, for which nMonomer = 3 and
nBlock = 3.  For simplicity, assume that the three blocks have monomer 
types indices 0, 1 and 2, and the all three blocks are of length 1.0. 
Let vertices 0, 1, and 2 represent the ends of the blocks of types
0, 1, and 2, respectively, and let vertex 3 be the central junction.
The Polymer block for such a polymer would look like this:
\code
  Polymer{
    type branched
    nBlock 3
    blocks[
             0   1.0    0   3
             1   1.0    1   3
             2   1.0    2   3
    ]
    phi  1.0
  }
\endcode
Note that the type parameter must be explicitly set to "branched",
because the type is set to linear by default.  We have set phi = 1.0 
in this example on the assumption that this is a one-component 
terpolymer melt, for which the volume fraction of this species 
must equal unity.

\section user_param_mixture_solvent_sec Solvent Block

A mixture block may contain zero or more Solvent blocks immediately
after the Polymer blocks. The number of such blocks must equal the
value of the parameter nSolvent, which is set to zero by default.
The format for a solvent block is
\code
    Solvent{
       monomerId   int
       size        real
       phi*        real
       mu          real (required iff phi is omitted)
    }
\endcode
The monomerId is a monomer type index that identifies the solvent
as containing a specified monomer type. The size parameter gives
the volume occupied a solvent molecule, in units in which the 
monomer reference volume is equal to unity. For each solvent, a
value must be specified for either the volume fraction phi occupied
by the species, or its chemical potential mu. It is an error to 
specify both phi and mu or to omit both variables.

<BR>
\ref user_param_format_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_page        (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_sweep_page  (Next) 

*/
