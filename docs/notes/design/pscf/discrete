
Model (simple bead-spring model):
---------------------------------

   1) Every vertex bead must be "owned" by exactly one of the attached 
      blocks. An end bead is always owned by the single attached block

   2) The bond attaching a vertex to a block is always of the same type 
      as the attached block.

   3) In a linear chain, by default, every block owns its last bead, and 
      the first block also owns its first bead.

   4) In the parameter file for a linear chain, the user sets the number 
      of beads owned by the block.

What new information is required in implementation:

   1) Which polymer model is being used (thread or bead model) ? 
      [Globally accessible enumeration variable]

   2) Which block and/or propagator contains the vertex bead.
      [Define bool member variables in BlockDescriptor and 
       PropagatorTmpl classes]

Implementation stategy:
-----------------------

   1) In class BlockDesriptor, each block has a value for nBead_ (the 
      number of beads that it owns). For a discrete bead model, the
      parameter file should contain values for nBead.  The Rpc::Block 
      and Rpg::Block classes will still also have values for ns_ and ds_. 
      In a thread model, nBead_ = ns_. In a bead model, length = ds*nBead_. 

   2) Internally, each propagator stores ns_ + 1 slices, indexed 
      0, ..., ns, as in the current thread model.  Slice 0 is associated 
      with the head vertex and field n is associated with the tail 
      vertex.  The number nBead can vary from ns-1 to ns+1, depending 
      on whether the block owns both, one or none of the two terminating 
      vertex beads.

   3) Propagator slice i associated with bead i contains the field
      weight factor associated with bead i for the head slice (i=0)
      all non-vertex beads (i=1, ..., ns-1). The slice associated with
      the tail vertex bead (i=ns) includes this factor if and only if the 
      propagator owns the tail vertex bead. If propagator does not own 
      the tail vertex, then the slice associated with the tail is treated 
      as a dangling bond, with no weight function arising from the tail 
      vertex bead.
      
   4) A function Block:: stepBead that will be used for steps from
      i-1 to i for i = 1, ..., ns_ - 1 will first apply a bond operator 
      exp(-k^2 b^2 *ds/6) and then a field weight operator exp(W*ds). 

   5) The tail weight for bead ns is obtained by applying a bond operator
      to bead ns - 1, and then applying a field weight if and only if
      the propagator owns the tail vertex bead. 

   6) The head slice for a head vertex that not owned by a propagator 
      is given by the pointwise product of tail fields associated with 
      sources, exactly as in the current code. In this case, this product 
      will always include a weight function for the vertex bead that 
      arises from the tail slice for the source propagator that owns the 
      vertex bead. The head for a propagator that owns the head bead 
      must instead acquire an additional weight factor for the bead.
      This additional weight factor must be applied by the propagator
      that owns the bead, as part of the computation of the slice for
      the head. 

   7) Computation of contributions to monomer concentrations from 
      non-vertex beads must include a factor of the inverse of the
      weight factor associated with that bead, as in Matsen's algorithm. 
      This inverse weight factor should be stored separately, because it
      is applied repeatedly, and because division is 2-3 times more 
      expensive than multiplication.  

   8) The contribution of each vertex bead to overall concentration 
      is only included in summations for the block that owns it. 
      Each such bead has an associated head slice from one propagator 
      and a tail slice from the other associated with the same block
      that both include the weight factor for that vertex bead. The 
      contribution from such a vertex bead must thus include a factor 
      of the inverse of the bead field weight, exactly as for non-vertex 
      beads. 

Proposed Implementation:
------------------------

1) Define an namespace Pscf::PolymerModel that contains an unscoped
   (C-style) enumeration and several functions to set and get a value:

namespace Pscf{
namespace PolymerModel{

  enum Enum = {Null, Thread, Bead};

  void setModel(PolymerModel::Enum );

  PolymerModel::Enum model();

  bool isNull();
  bool isThread();
  bool isBead();

}
}

These functions set and query values of a pseudo-private variable polymerModel_ 
that is defined and initialized in an anonymous namespace in PolymerModel.cpp.

Define extractor and inserter (>> and <<) operators to read and write values 
of this new enum type.

Rules: 

   - The variable polymerModel_ is initialized to PolymerModel::Null

   - A non-null value may only be assigned once.

   - Attempts to reset a non-null variable to the same value are silently
     accepted as harmless.

   - Attempts to reset this variable to a different non-null value
     after it has been set to a non-null value are an error and cause
     execution to stop with an error message. 

Note: We could use this pattern later to define enum classes to specify whether 
the interaction is compressible and/or has a nonzer range.

2) Add a private member polymerModel_ to the System class. If 
PolymerModel::isNull(), optionally read this as the first member of the 
block, before the beginning of the Mixture class. The file format would 
thus be:

  System{
     polymerModel*  PolymerModel::Enum
     Mixture{ ... }
     Interaction{ ... }
      ...
  }
 
Set System::polymerModel_ to PolymerModel::Thread by default.  When the 
value is known (after it is optionally read), set the global variable
to the same value. 

3) In Mixture::readParameters, if PolymerModel::isBead(), make reading of 
ds_ optional, and set ds_ = 1.0 by default. 

4) Create a member nBead_ in the BlockDescriptor class. In the inserter 
and extractor operators for the block function, read this rather than 
length. For a bead model, set length = ds*double(nBead), and compute ns_ 
from nBead once it is known which end beads the block owns, if any. For 
a thread model, set nBead_ = ns_. 

5) For the BlockDescriptor class, add a private member array Pair<int> 
ownsVertex_ , a set function void setVertexOwnership(int i, bool) and 
a get function bool ownsVertex(int i). Set both values to true by 
default for the thread model, which does not use vertex ownership.

6) In the PropagatorTmpl class template, define private bool member
variables named ownsHead_ and ownsTail_, and define public accessor 
functions bool ownsHead() and bool ownsTail().

Make BlockDescriptor::setVertexOwnership a friend of PropagatorTmpl 
so that this function can set Propagator vertex ownership flags when 
it sets flags for the block.

For linear molecules, values of ownsVertex for each block can be set 
before reading the blocks. 

7) The file format for a branched polymer will eventually have to be 
changed to specify which of the attached vertices it owns. Initially, 
set it to throw an error if a molecule is declared branched and 
PolymerModel::isBead() is true.  Go back later and change the file 
format.

8) In the Block class, change the name of the current step function to 
stepThread.  Add several additional public member functions to give:

   void stepThread(Propagaor const & in, Propagator & out) 
   void stepBead(Propagaor const & in, Propagator & out) 
   void stepBondBead(Propagaor const & in, Propagator & out) 
   void stepFieldBead(Propagator & q)

Note that the stepFieldBead function applies an in-place scaling while 
the stepFieldBead has an input and output argument. We may be able to
construct the stepBead class from stepBondBead and stepFieldBead.

9) In Block class, use expW_ to store exp(W(r)ds) in the case of a
bead model, but use expW_ to store exp(W(r)ds/2) in the case of a
thread model. For a bead model, array expW2_ is simply unallocated
and unused.

10) In the Propagator class change the name of the current computeHead
function to computeHeadThread() and add an additional function
computeHeadBead(). The computeHeadBead function can call 
computeHeadThread internally, then call Block::stepFieldBead.

11) In Propagator::solve, simply include a single if statement to
separate the code for the thread model. The thread model calls 
computeHeadThread and stepThread. Code for the bead model uses
computeHeadBead and stepBead, while also using stepBondBead for
the tail bead and stepFieldBead only if the tail bead is owned.

12) In Block::computeConcentrations, place the code for thread
model and bead model in separate blocks of an if-else. The 
code for the bead model is a simple sum (with no Simpson' rule
or trapezoidal rul) that includes any bead vertex that is owned
by the block. 

