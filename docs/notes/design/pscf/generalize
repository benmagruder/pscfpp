
Strategy:

Possible types of generalization (and associated issues):
----------------------------------------------------------

 For each type of generalization, we have to choose between
 different programs with different code bases for some features,
 or switches that allow multiple options within a single code.

 - Continous vs. discrete chains 
     - Definitely affects block class
     - Treatment of vertices for continuous chains
     - Also affects Sweep class (can't sweep discrete lengths)

 - Change in nature of interaction:
     - Compressible vs. Incompressible
     - Local vs. Nonlocal
     - Harmonic vs. Anharmonic interation models
     - Strong influences design of Iterators
     - Also affects Sweep class

 - Complex values fields and free energies

     - Necessary for CL-FTS

     - May need to rethink some solver templates and 
       classes that were designed for use with real fields


Continuous vs. discrete chains:
-------------------------------

Alternative 1:

Proposed division of code into subnamespaces for the "thread" model 
(Continuous chains) and for models with discrete beads.

namespace Pscf::Continuous{
     // Continuous chains, defined in terms of preferred volume.
     chem/
     solvers/
}

Namespace Pscf::Bead{
     // Discrete beads, compressible, generally non-local
     chem/
     solvers/
}

Place these in Pscf, but use "using Pscf::Continuous" or 
"using Pscf::Discrete" as needed. 

Alternative 2:

  - Allow continuous or discrete models in current code, chosen by 
    a global (perhaps class static) boolean variable. 

  - Put switch in Block to change iteration algorithm

  In case of discrete model:

     - Assign each vertex a type

     - Block lengths become integers that specify the number of
       monomers other than vertices.

     - Add file format to specify vertex types. For linear polymers
       consider adding default which make this unnecessary.

     - Default: For linear polymers, each junction has the same type
       as the previous block (pick one).

     - Assign each monomer type a bond length that is used for bonds
       between monomers of the same type.

     - Default: For linear polymers, bonds between the last monomer of
       one block and the first monomer of the next use the bond type 
       of the next block. 

     - Add a convention that, by default bonds between beads of 
       different type that are conntected to a vertex is the arithmetic 
       mean of the bond lengths associated with the two types.

     - Add file format to specify types of bonds for bonds between
       beads of different type.

     - Stick to Gaussian bonds for now.

Generalized Interaction
-----------------------

Create Interaction class with the following flags:

   - Local
   - Incompressible
   - Harmonic (i.e., linear equation for w as a function of concentration)

Iterators can then be designed for interactions with specific properties,
and can test for these properties to ensure validity.

Locality:

   - W fields for local interactions can be computed in real space. 

   - W fields for translationally invariant nonlocal interactions can 
     be computed in Fourier space.

   Questions: 

   - Can we define an interface that allows either?

   - Should local vs. nonlocal interactions be implemented in 
     entirely different programs, or can we accomodate them 
     within one?

Linearity:

   - Expressions for linear fields are relatively easily invertible. 
     Inversion is possible for either compressible or incompressible 
     cases, but applied differently. 

Compressibility:

   - The question of whether the code is compressible can be 
     handled entirely within the iterator. 

Sweep:

   - For each type of interaction, we would have to define an an 
     interface to the linear sweep class, or have if statements in
     the sweep class to cope with multiple possibilities.

Iterators:
----------

Strategy: Allow for the proliferation of different types of iterators
for specific types of interaction. 

Try to make Anderson-Mixing algorithm sufficiently abstract to deal
deal with different types of residual, field, correction step, etc.


Sweep
-----

Try to define an interface that allows the linear Sweep class to 
delegate responsibility for some parameters to more specialized
classes. 

Possible design: Define specialized classes associated with the 
Mixture, Interaction, Domain, and Iterator that handle linear
sweeping of parameters associated with these elements. Create a 
set of Factory functions or classes that can produce the correct 
element based on the className of the Mixture, Interaction, Domain 
or Iterator.

Develop an interface for such a class that only manipulates input 
variables, which is separate from the code for the sweep that 
extrapolates solutions.
