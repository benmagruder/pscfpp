Design choices / conventions:
=============================

   (1) Namespaces will be named Pscf::Cpc (CPU) and Pscf::Cpg (GPU), 
   where the acronyms stand for Cpc -> complex periodic CPU and 
   Cpg -> complex periodic GPU

   (2) There will be no Basis class used in these namespaces, and thus 
   no symmetry-adapted Fourier basis avialable for use in these complex 
   codes.

   Rationale: (1) SCFT with an imposed symmetry can be done with existing
              codes. Fluctuating FTS fields don't have an exact symmetry.
              (2) The Basis class was originally designed for real fields, 
              using the indexing system for RFieldDft with implicit waves. 
              It would have to be redesigned to describe a Fourier bassis 
              for a general complex field

   (3) In Pscf::Cpc CPU code, use double and fftw_complex as basic types

   (4) In Pscf::Cpg GPU code use the cudaReal, cudaComplex, hostReal and 
   hostComplex typedefs defined in the GpuTypes.h file

   (5) In Pscf::Cpg namespace, allow "using namespace Pscf::Prdc", so 
   that Prdc is not needed as a class name qualifier, but use explicit Cpu
   and Cuda qualifiers for classes defined in Prdc::Cpu and Prdc::Gpu
   (e.g., RField, RFieldDft, CField, and FFT).

   Rationale:: The complex GPU code may need to use both real and complex 
   fields defined on the CPU, e.g., for file IO, as well as fields defined 
   on the GPU for fast computation. Analogous RField, RFieldDft and CField
   classes with data on CPU and GPU are (or will be) defined in these 
   subnamespaces, and so these different classes with the same names need 
   to be distinguished by a namespace qualifier in any code that might 
   need to use both sets of classes. 


Programming tasks:
==================

In namespaces Pscf::Prdc::Cpu and Pscf::Prdc::Cuda

   - Create class CField 

   - Create class CFieldComparison

   - Add complex transform functions to FFT classes in both namespaces

In namespaces Pscf::Cpc and Pscf::Cpg

   - Create class FieldIo (functions for both complex and real fields).
     Note: This will be not have any functions involving a basis, which
     will simplify things considerably.

   - Create class Domain (Mesh, UnitCell, FFT, FieldIo, no symmetry).
     Note: Absence of Basis, SpaceGroup, groupName etc. is a simplification.

In namespace Pscf, get ready to do complex arithmetic operations:

   - Overload +, -, *, / operators for fftw_complex as standalone
     functions defined in Pscf.

     Note:: fftw_complex is a typdef for double[2]

   - Overload +, -, *, / operators for cufftDoubleComplex, cufftComplex.

     Note:: cuffDoubleComplex is a typdef for a cuComplex, which is a
     struct { double x; double y}, so these definitions are distinct
     from those used for fftw_complex

In namespaces Pscf:Cpc  and Pscf::Cpg

   - Create solver classes (Propagator, Block, Polymer, Solvent, Mixture)

   - Create and appropriate Interaction class (nonlocal by default)

   - Create System (Mixture, Interaction, Step)

   - Create Step base class, factory and default class

Possible later extensions:

  -  We could later implement SCFT with no symmetry constraints (add 
     Iterator)

  -  We could eventually reimplement perturbation theory in these complex
     codes. This functionality requires solution of complex MDE, so this
     would be the natural place for this.
   
