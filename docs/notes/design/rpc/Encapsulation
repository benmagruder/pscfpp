Goal: Change pscfpp interfaces so as to better enforce data validity.

======================================================================
Changes that can be made (mostly) without affecting GPU code:

Block
-----

   - Add a private boolean variable hasExpKsq_ that is initialized
     false and set false any time you change anything that could 
     invalidate data in the arrays expKsq_ an expKsq2_. (done)

   - Change setupUnitCell to setUnitCell. Have this function store
     a pointer to UnitCell that can be retrieved later, and have it
     set hasExpKsq_ = false. (done)

   - Reimplement BlockDescriptor::setLength so as to set ds_ if 
     ns_ > 1, and to set hasExpKsq_ = false (done).

   - Add re-implemented virtual function setKuhn(....) in Rpc which 
     sets the kuhn_ variable and sets hasExpKsq_ = false (done)

   - Create a private function computeExpKsq that is called by
     setupSolver if and only if (!hasExpKSq_) (done)

Monomer Kuhn Length
-------------------
 
   - Create a function Mixture::setKuhn(....) that sets the step
     value in the Monomer descriptor and calls setKuhn(...) for
     every block of the relevant monomer type (done).

Domain
------

   - Get rid of System member functions of system that directly return
     members of Domain (unitCell, mesh, basis) (done).

   - Make System return domain by const reference, so that members of 
     domain cannot be directly modified outside of System class.

C-Fields
--------

   - Make System<D> cField accessor c() return constant reference (done).

     Rationale: There is no reason to allow users to modify the concentration 
     field, which should be computed internally.

   - Make System<D> wField accessor w() return constant references (done).

     Users must use a read or set function to set the w-field, which can
     set flags to invalidate variables that depend on w. 

     
W-Fields
--------

   - Make all System<D> wField accessors return constant references

   - Add setter functions:

         System<D>::setFieldsBasis(DArray<DArray<double> > & ) 
         System<D>::setFieldBasis(int monomerId, DArray<double>& ) 

         System<D>::setFieldsRGrid(DArray<WField>& )
         System<D>::setFieldRGrid(int MonomerId, WField& )

     Setter functions will ensure consistency of Basis and RGrid forms.

FieldIo
-------

   - Check const-correctness on FieldIo: It seems that all the Field
     Io, conversion and symmetry checking functions could be marked
     const. 

   - If we can make all functions except associate const, we can change
     System<D> so as to return a const reference?

======================================================================
Changes that could affect the GPU code:

ChiInteraction:
---------------

  - Clean up the interface of ChiInteraction, move quantities that
    are used by a specific iterator to that iterator.

BlockTmpl:
----------

  - Make cField_ protected, to allow derived classes to compute it

  - Change BlockTmpl::cField(int i) to return a const reference.

MixtureTmpl 
-----------

  - Change MixtureTmpl::monomer(int i) to return a const reference.

  The only property we should ever need to change is kuhn, and that
  should only be changed by System<D>::setKuhn(int i, double value).


Basis
------

   - Check if Basis::Wave::sqNorm and Basis::Star::eigen are actually used.

   - If not, see if they can be removed. The need to keep them updated is
     dangerous.

   - If we can remove the Basis<D>::update function, we can make System<D>
     return a const reference.

