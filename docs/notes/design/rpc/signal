Unit Cell Modification
----------------------

General Proposal: Consider using signals to keep track of changes to unit 
cell dimensions, possibly other changes. 

Changes to unit cell cause changes in internal parameters in all Block 
objects, as well as WaveList in Rpg. Signals sent to Mixture and 
WaveList would do the trick. The Mixture::modifyUnitCell() method could
call 

Proposed approach:

   (1) Add a Signal<> unitCellModifySignal_ object to the Domain.

   (2) Give the UnitCell class a pointer to a Signal<> objects, which
       is null by default, so that it can manage side-affects of
       changes to its own internal state when that pointer is not null. 

   (3) Behavior of the UnitCell<D> should be unchanged when the pointer
       to the Signal<> is null, or when the associated Signal<> has no
       observers.

Unit Cell classes (details):

   - Add private member Signal<>* signalPtr_ to UnitCell

   - Copy construction of a UnitCell is prohibited (already true)

   - Pointer signalPtr_ is NOT modified by the assignment (=) operator

   - Signal<>::notify method is called by 

          UnitCell<D>::set(UnitCell<D>::Lattice, 
                           FSArray<double, 6> const& parameters)

          UnitCell<D>::operator = (UnitCell<D> const &)

          // friend functions

          operator >> 

          readUnitCellHeader 

Domain class details :

   - Associate unit cell that is owned by Domain with associated Signal<>.
     This could be done in the Domain constructor.

   - Provide public member function to add observers to signal.

     template <class Observer>
     void 
     addUnitCelllModifyObserver(Observer&, void (Observers::*methodPtr)());

   - Domain does not need to provide public access to the Signal<>, or a 
     function to explicitly call Signal<>::notify . Notification should 
     happen if and only if the UnitCell is actually modified, which can
     be enforced if only the UnitCell can call notify. 


Observers:

   Mixture::modifyUnitCell 
       - Mark all blocks as dirty (invalid)

   Domain::WaveList::modifyUnitCell 
       - Mark wave magnitudes and dot products as dirty (invalid)

   We could also consider making Basis::makeBasis() an observer.

   General Policy:

       - Notification is used to mark associated data as invalid.
       - Data is updated when needed, by checking validity before access

       -> Just in time updates, avoids unnecessary or redundant updates.


===========================================================================

Signals to note W Field Modification (?????)
--------------------------------------------

Proposal:

   1) Add a Signal<> member to the WFieldContainer.

   2) Add public functions System::clearCFields() and System::clearFreeEnergy()
       to System that sets hasCFields_ and hasFreeEnergy_ false respectively.

   3) Add the clear functions to the WFieldContainer Signal<> as observers

   4) Features added to WFieldContainer can be applied to external fields
      as well as w fields.

Discussion:

   - Retains current system for keeping track of the relationship between 
     WFields and CFields, just automates the process of marking variables 
     as dirty.

   - Might make the System setWBasis and setWRGrid functions trivial or 
     unnecssary.  Might not get rid of the need for readWBasis, since we 
     may still need the code to peek at the header in order to construct 
     a basis, unless we rely on the FieldIo to do this.

===========================================================================
Conclusion:
 
   - Recommend against the use of signals to keep track of the relationship
     between W and C fields.  Not worth the effort, and harder to understand
     because it is less explicit.

   - Leaning against using it for UnitCell as well, since the only thing it
     would accomplish would be allowing us to all access to Domain::unitCell_
     via a non-const reference, and I'm not sure we should do that.

   Maybe the current system is not bad. It is more explicit and easier to
   understand than the hidden use of Signals.
