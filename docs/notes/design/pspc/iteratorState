Idea: Classes to model SCFT states and differences between states

It would be useful to have class that represents a solution to a SCF problem, 
along with tools to control file IO of this information and to compare 
different solutions.  Different implementations would be required for 
different SCFT tools (e.g., fd1d vs.  pspc). The state would always include 
the w-fields for all monomers, and should include all other parameters that 
are adjusted during iterative solution. 

In codes designed to solve SCFT for periodic structures with an ajustable unit 
cell, the state data would include unit cell dimensions as well as w field 
configurations.  The field formats designed for the fortran code all stored 
precisely this information, giving information about unit cell dimensions 
in a standard file header.

Rationale - This seems potentially useful for several purposes:

1) A templatizable way of storing histories during a sweep operation.

2) Compact interface for reading and writing field files into an that 
retains unit cell information as well as field information.

3) An aid to writing compact regression tests of SCFT solutions.

-------------------------------------------------------------------------------
Proposed class or class template interfaces:

/**
* Container for a set of chemical potential fields and unit cell parameters.
*
* A State represents the current state of a System, in the form used by an
* iterator, of the solution of a SCFT problem. The FT template parameter is 
* a field type, which can be either an DArray<double>, to represent each 
* field using a symmetry-adapated Fourier basis, or an RField, to represent 
* each field using a real-space grid.
*
* The State has an internal UnitCell and an internal FieldIo, and a pointer
* to an associated System. The FieldIo is associated with UnitCell of this
* State, but with the Mesh, FFT, Basis, groupName, and FileMaster of the 
* System. That allows the fieldIod to read and write field headers containing 
* data for the UnitCell of this state.
*/
template <int D, class FT>
class State
{

   /**
   * Default constructor.
   */
   State();

   /**
   * Constructor, associate with System.
   */
   State(System& system);

   /**
   * Destructor.
   */
   ~State();

   /**
   * Create association with System and initialize.
   *
   * Set associations of FieldIo to Mesh, FFT, groupName, Basis, and 
   * FileMaster of the associated System, but to the internal UnitCell 
   * of this State.
   /*
   void setSystem(System& system);

   /**
   * Assignment operator from another State
   */
   void operator = (State<FT>& )

   /**
   * Get current state from associated System.
   */
   void getSystemState()

   /**
   * Read state from a field file
   *
   * Explicit specializations should call the appropriate read method for
   * files of type FT.
   */
   void read(std::in ) = 0;

   /**
   * Write state to a field file
   *
   * Explicit specializations should call the appropriate write method for
   * files of type FT.
   */
   void write(std::in ) = 0;

   // Accessors
  
   const FT& field(int i) const;

   const DArray<FT>& fields() const;

   const UnitCell& unitCell() const;

   // Create a linear combination of states, store in this object.
   linearCombination(Array<State> states, Array<double> coeffs, 
                     bool isRigid);

private:

   DArray<FT>  fields_;

   UnitCell<D> unitCell_;

   FieldIo<D>  fieldIo_;

   System<D>*  systemPtr_;

}

template <int D, class FT>
class FieldComparison
{
public:

   compare(const DArray<FT> & , const DArray<FT> const & );
   
   double maxAbsDiff();
 
   double rmsDiff();

private: 

   double maxAbsDiff_;
 
   double rmsDiff_;

}

template <int D>
class UnitCellComparison
{

public:

   compare(const UnitCell<D>&, const UnitCell<D>& );

   double maxAbsDiff();
 
   double rmsDiff();

private: 

   double maxAbsDiff_;
 
   double rmsDiff_;

}
