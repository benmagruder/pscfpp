TODO (pspg GPU code):

Clean up of kernel functions
-------------------------------------------------------------------------

1) Comment out (first) then erase (second) unused kernels.
   Some are found in solvers/Block.tpp and (possibly?) math/Helpers.cu
   (From Ryan: definitely some in math/Helpers.cu!)

2) Replace scaleRealData in fieldFFT.tpp by function from linearAlgebra

3) Consider moving FFTBatched.tpp/scaleComplexData to linearAlgebra

4) Consider moving some pointwise multiplication functions from Block
   to LinearAlgebra, including those that operate on complex data.

5) Move parallel reduction kernels to private namespace in implementation
   of kernel wrappers, so not publically visible. 

6) Establish more consistent function name conventions.

   One possibile set of semantic units for vector operations:

       LHS (result):
       rV - real vector
       cV - complex vector

       Operations:
       Sub   -> subtraction
       Add   -> addition
       Mul   -> pointwise multiplication
       Div   -> pointwise division
       Eq    -> assignment

       RHS operands:
       V     -> vector on rhs (same as LHS by default)
       Vr    -> real vector (when not same as lhs type)
       R     -> real scalar 
       C     -> complex scalar 

       Binary operations C = A Op B have form C_OpAB (two arguments)

       Real Vector-vector addition       : rV_AddVV
       Real Vector-vector multiplication : rV_AddVV
       Real Vector-scalar multiplication : rV_MulVR

       Increment operations A = A Op B have form A_OpB (one argument)
       Real Vector-vector add-increment  : rV_AddV
       Real Vector-scalar add-increment  : rV_AddR

       Assignment: A = B have names A_EqB  :
       Assign real vector to vector      : rV_EqV
       Assign real vector to scalar      : rV_EqR

       Corresponding functions that return a complex-valued vector
       will start with cV. Arguments on the RHS side will use C for
       complex scalar, R for real scalar, V for complex vector and
       rV for real vector.

       Kernel functions can use names as described above, but with
       suffix __ to indicate a kernel, e.g., rV_EqV__. 

       Analogous names can be used for __global__ CUDA kernels (called 
       with <<< >>> syntax) and for corresponding C++ __host__ 
       functions that act on pointers or array containers.

   Example kernel names (called with CUDA <<< ... >>> ) syntax

       // Unary operations (vrOpA => v = v Op A)
       subtractUniform          -> rV_SubR__
       addUniform               -> rV_AddR__
       pointWiseSubtract        -> rV_SubV__
       pointWiseAdd             -> rV_AddV__
       scaleReal                -> rV_MulR__
       scaleComplex             -> cV_MulC__

       // Binary operations (vrAOpB => v = A Op B)
       pointWiseBinarySubtract  -> rV_SubVV__
       pointWiseBinaryAdd       -> rV_AddVV__

       // Assignment operations (LHS = 
       assign uniform           -> rV_EqR__
       assign vector            -> rV_EqV__
       assign exp of vector     -> rV_ExpV__

       Corresponding functions that return a complex-valued vector
       will start with vc. Arguments on the RHS side will use C for
       complex scalar, R for real scalar, V for complex vector and
       Vr for real vector.

       Overloaded versions of wrapper functions will be provided for
       pointers, for which size must be provided as a parameter, and 
       for field containers, for which size is provided by container.

       Parameter order same as in order of equation (lhs first).

    Example wrapper function for reductions:

       reduceSum
       reduceAbMax

       Corresponding kernel names have suffix __ 

       Overloaded versions of wrappers for pointers and containers,
       in which thread grid is computed internally.
       Versions for pointers take the size as a parameter.

6) Rename files:

       LinearAlgebra  -> VectorOps
       KernelWrappers -> Reductions (both kernels and C++ wrappers)

       Provide overloaded operations for field containers in 
       directories or files that define containers

       Move Helpers to draft/pspg ?
      
