#=========================================================================
# file: $(BLD_DIR)/config.mk
#
# This makefile fragment is the main configuration file for the pscf
# build system.  A copy of this file is included by all other makefiles. 
# This file is created and installed by the "setup" script. One copy of 
# this file is installed in the root directory of the src/ directory
# tree, which is used for in-source compilation. Another copy is 
# installed in the root directory of the bld/ directory tree, which is 
# used for out-of-source compilation.
#
# This file contains user-modifiable definitions of several types of 
# makefile variables:
# 
#  - Variables ROOT_DIR, SRC_DIR, BLD_DIR, BIN_DIR and DAT_DIR that 
#    contain absolute paths for the pscfpp/ root directory and some 
#    of its subdirectories.
#
#  - A variable UTIL_DEBUG that, if defined, enables compilation of
#    a debugging version fo the code with additional sanity checks.
#
#  - A variable PSCF_CUDA that is, if defined, enables conditional
#    compilation of CUDA code throughout the Pscf namespace.
#
#  - Variables that control the command name by which the compiler 
#    is invoked and command line options passed to the compiler 
# 
#  - A variable MAKEDEP that enables automatic dependency generation.
#
#=========================================================================
# Variables that define absolute directory paths
#
# In the config.mk file installed in each build directory, correct
# values of these variables should have been set by the setup script,
# and should not need to modified by the user.

# Absolute path to the pscfpp/ root directory
ROOT_DIR=PWD

# Path to the build directory (location for intermediate generated files)
# This should be the directory that contains this config.mk file
BLD_DIR=$(ROOT_DIR)/=OWD

# Path to the source directory (contains C++ source code files)
SRC_DIR=$(ROOT_DIR)/src

# Installation directory for binary executable program files
BIN_DIR=$(ROOT_DIR)/bin

# Directory for shared permanent (read-only) data used by programs.
DAT_DIR=$(ROOT_DIR)/data

#======================================================================
# Conditional compilation of debugging.

# Defining UTIL_DEBUG enables a variety of extra sanity checks, at some
# cost in speed. By default, debugging is disabled (commented out).
#UTIL_DEBUG=1

# Comment: After setup but before compilation, the above definition of 
# UTIL_DEBUG may be uncommented or commented out from the command line 
# by using the "configure" script. To do so, invoke the configure script 
# with the -g option prior to compilation from the directory that contains 
# this main configuration file (e.g., from src/ or bld/). Specifically, 
# invoke "./configure -g1" to enable debugging or "./configure -g0" to
# disable debugging. 
#
#======================================================================
# Conditional compilation of CUDA code
 
# Defining PSCF_CUDA enables compilation and linking of CUDA code.
# By default, CUDA compilation is disabled (commented out).
#PSCF_CUDA=1
 
# Comment: After setup but before compilation, the above definition of 
# PSCF_CUDA may be uncommented or commented out from the command line 
# by using the "configure" script. To do so, invoke the configure script 
# with the -c option with an option argument of 0 or 1 prior to 
# compilation from the root of the relevant build directory tree (e.g., 
# from src/ or bld/). Specifically, enter "./configure -c1" to enable 
# CUDA compilation or "./configure -c0" to disable.
#
#======================================================================
# Compiler configuration variables.
#
# The following block of variable definitions is initialized by 
# the setup script by copying a compiler configuration file in the 
# make/compiler directory.  If the setup script is invoked with no 
# argument, the file "make/compiler/default" is used by default.  
# Users may add files to the make/compiler directory to store 
# settings required for a particular environment. The name of a 
# desired compiler configuration file may be specfied by invoking
# the setup script with the base name of the desired file as an 
# argument (e.g., "> ./setup local"). 
#
# Variables defined in this block define the names of the commands 
# used to invoke the compiler when compiling and linking files, some
# of the command line options passed to the compiler to control,
# and search paths for header files and libraries files for required
# external libraries.  See the section of this file entitled "Makefile 
# Patterns and Recipes" for a discussion of how these variables are 
# used.
#
