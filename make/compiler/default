# >>>>>>>> Begin inclusion of file make/compiler/default
#
# Compiler configuration file section:
#
# The block of variable definitions that follows this explanation is 
# initialized by the configure script by copying the contents of a 
# compiler configuration file found in the make/compiler director into
# the main config.mk files in the src/ and bld/ directories. The file
# "make/compiler/default" is used by default.  Users may add files to
# the make/compiler directory to store customized settings. If the
# configure script is invoked with a filename argument (e.g., as
# "./configure local"), the file in the make/compiler directory with
# the specified name (e.g., make/compiler/local) is used as the compiler
# configuration file and copied into the main config.mk files.
#
# Variables defined in this block define the names of commands used to
# to invoke compilers and linkers, some of the standard command line 
# options passed to the compiler, and search paths for header files and 
# libraries files for required external libraries.  See the section of 
# this file entitled "Makefile Patterns and Recipes" below for a 
# discussion of how these variables are used.
#
# The definitions given in make/compiler/default are designed to work on 
# most linux systems. They assume that:
#
#   - The command g++ is used to invoke the C++ compiler.
#   - The command nvcc is used to invoke the nvidia cuda compiler (if any)
#   - Header files and libraries for the CUDA and FFTW libraries are in
#     directories in standard compiler search paths.
#   - The gsl-config command can be used by the configure script to find the
#     header and library paths for the Gnu Scientific Library (GSL).
#
# These definitions also work for Mac OSX environments with an Intel CPU
# and unix command line tools installed (for which the g++ command invokes 
# the clang compiler) when the homebrew package manager was used to install 
# the GSL and FFTW libraries. The installation locations used by homebrew
# on Macs with Intel CPUs are consistent with those used by linux (while
# the locations used by Homebrew on a Mac with Apple ARM CPUs are not).
# -------------------------------------------------------------------
# C++ compiler and options (for *.cpp files)

# C++ compiler Command name
CXX=g++

# Compiler option to specify ANSI C++ 2011 standard (required)
CXX_STD = --std=c++11

# Flags always passed to compiler when debugging is enabled
CXXFLAGS_DEBUG= -Wall $(CXX_STD)

# Flags always passed to compiler when debugging is disabled (fast)
CXXFLAGS_FAST= -Wall $(CXX_STD) -O3 -ffast-math -Winline

# Compiler flags used in unit tests
TESTFLAGS= -Wall $(CXX_STD)

# Compiler command used to generate dependencies
MAKEDEP_CMD="-C$(CXX) -MM -MF"

# ---------------------------------------------------------------
# OpenMP flags and paths

OPENMP_FLAGS=-fopenmp
OPENMP_INC=
OPENMP_LIB=

# ---------------------------------------------------------------
# CUDA compiler and options (for *.cu files)

# NVIDA CUDA compiler command
NVXX=nvcc

# NVCC architecture identifier, argument of -arch compiler option.
# Use sm_xx, where xx denotes a numerical code for a CUDA compute 
# capability, without the dot between major and minor version. For
# example, use sm_35 for compute capability 3.5 (e.g., for a K40 
# NVIDIA GPU)
NVARCH=sm_35

# Flags always passed to cuda compiler
NVXXFLAGS= $(CXX_STD) -O3 -arch=$(NVARCH)

# Compiler command used to generate dependencies for CUDA
MAKEDEP_CUDA_CMD="-C$(NVXX) -M"

# ---------------------------------------------------------------
# Linker / Loader 

# Flags passed to compiler for linking and loading
LDFLAGS=

# ---------------------------------------------------------------
# Archiver

# Library archiver command (for creating static libraries)
AR=ar

# Flags (command line options) passed to archiver
ARFLAGS=rcs

#-----------------------------------------------------------------------
# Paths and flags associated with external libraries

# Gnu Scientific Library
# Note: Paths may be automatically generated by configure using gsl-config 
GSL_INC=GSL_INC_AUTO
GSL_LIB=GSL_LIB_AUTO

# FFTW Fast Fourier transform library
ifndef OPENMP 
  # Paths to FFTW without OpenMP
  FFTW_INC=
  FFTW_LIB=-lfftw3
else 
  # Paths to FFTW with OpenMP threads enabled
  FFTW_INC=
  FFTW_LIB=-lfftw3
endif

# CUDA libraries
# CUDA_PREFIX=/usr/local/cuda
# CUDA_INC=-I$(CUDA_PREFIX)/include
# CUDA_LIB=-lcufft -lcudart -lcuda -lcurand
CUDA_INC=
CUDA_LIB=-lcufft -lcudart -lcuda -lcurand

# <<<<<<< End inclusion of file make/compiler/default
