# >>>>>>>> Begin inclusion of file make/compiler/mac-si-homebrew
#
# Compiler configuration file section:
#
# The block of variable definitions that follows this explanation is 
# initialized by the configure script by copying the contents of a 
# compiler configuration file found in the make/compiler director into
# the main config.mk files in the src/ and bld/ directories. The file
# "make/compiler/default" is used by default.  Users may add files 
# to the make/compiler directory to store customized settings. If 
# the configure script is invoked with a filename argument (e.g., as
# "./configure local"), the file in the make/compiler directory with
# the specified name (e.g., make/compiler/local) is used as the compiler
# configuration file and copied into the main config.mk files.
#
# Variables defined in this block define the names of commands used to
# to invoke compilers and linkers, some of the standard command line 
# options passed to the compiler, and search paths for header files and 
# libraries files for required external libraries.  See the section of 
# this file entitled "Makefile Patterns and Recipes" below for a 
# discussion of how these variables are used.
#
# The definitions given below are designed for use on a Mac OS X
# running on Mac silicon (e.g., the m1 or m2 ARM chip), using the homebrew
# package manager to install the GSL and FFTW libraries. They assume:
#
#   - The command g++ can be used to invoke the C++ compiler (though 
#     g++ may be an alias for the Apple installed Clang compiler)
#   - Header files and libraries for FFTW are in a subdirectory of the
#     /opt/homebrew directory
#   - The gsl-config command can be used by the configure script to
#     find the correct header and library paths for the Gnu Scientific
#     Library (GSL)
#
# Note: The default compiler configuration file can be used to compile
# on a Mac that uses an Intel CPU and the homebrew package manager, 
# because of  a difference in how homebrew is configured machines that 
# use intel and apple CPUss: Homebrew installs in /usr/local for Intel 
# silicon and in /opt/homebrew for Apple silicon.
# ---------------------------------------------------------------
# C++ compiler and options (*.cpp files)

# C++ compiler Command name 
# Default: On OS X, g++ actually calls the Apple installed clang compiler
CXX=g++
# Example of a path to a homebrew-installed GNU compiler 
# CXX=/opt/homebrew/Cellar/gcc/12.2.0/bin/c++-12

# Compiler option to specify ANSI C++ 2011 standard (required)
CXX_STD = --std=c++11

# Flags always passed to compiler when debugging is enabled
CXXFLAGS_DEBUG= -Wall $(CXX_STD) 

# Flags always passed to compiler when debugging is disabled (fast)
CXXFLAGS_FAST= -Wall $(CXX_STD) -O3 -ffast-math 

# Compiler flags used in unit tests
TESTFLAGS= -Wall $(CXX_STD)

# Compiler command used to generate dependencies
MAKEDEP_CMD="-C$(CXX) -MM -MF"

# ---------------------------------------------------------------
# OpenMP flags and paths

OPENMP_FLAGS=-fopenmp
OPENMP_INC=
OPENMP_LIB=

#ifdef PSCF_OPENMP
OPENMP_LIB+=-lfftw3_omp
#endif

# ---------------------------------------------------------------
# CUDA compiler and options (*.cu files)

# CUDA compiler command
NVXX=nvcc

# NVCC architecture identifier, argument of -arch compiler option.
# Use sm_xx, where xx denotes a numerical code for a CUDA compute 
# capability, without the dot between major and minor version. For
# example, use sm_35 for compute capability 3.5 (e.g., for a K40 
# NVIDIA GPU)
NVARCH=sm_35

# Flags always passed to cuda compiler
NVXXFLAGS= $(CXX_STD) -O3 -arch=$(NVARCH)

# ---------------------------------------------------------------
# Linker / Loader 

# Flags passed to compiler for linking and loading
LDFLAGS=

# ---------------------------------------------------------------
# Archiver

# Library archiver command (for creating static libraries)
AR=ar

# Flags (command line options) passed to archiver
ARFLAGS=rcs

#-----------------------------------------------------------------------
# Paths to header and library files for required external libraries

# Gnu Scientific Library
# Note: Paths may be automatically generated using gsl-config
GSL_INC=GSL_INC_AUTO
GSL_LIB=GSL_LIB_AUTO

# FFTW Fast Fourier transform library (as
ifndef OPENMP 
  # Paths to FFTW without OpenMP, as installed by homebrew
  FFTW_INC=-I/opt/homebrew/include
  FFTW_LIB=-L/opt/homebrew/lib -lfftw3
else 
  # Paths to FFTW with OpenMP threads enabled
  FFTW_INC=
  FFTW_LIB=-lfftw3
endif

# CUDA FFT library (not usable on any Mac)
CUFFT_INC=
CUFFT_LIB=

# <<<<<<<< End inclusion of file make/compiler/mac-si-homebrew
