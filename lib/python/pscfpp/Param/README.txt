User Instructions:
    This is a tool to parse the PSCF parameter file and store all values 
    within it in a single object. Users can access and modify the stored 
    values of the parameters after parsing by using specific statements 
    (commands). 

    Using Parser:
        A Composite object, representing any block of the parameter file that 
        is identified by opening and closing curly brackets ('{' and '}'), 
        stores all the entries within the block in a form that allows each 
        element within it to be accessed and modified. 

        In this version, a Composite is generated by calling the readParamFile 
        function, passing in the string of the name of the parameter file that 
        needs to be parsed. It will return the Composite object corresponding 
        to the 'System' block of the parameter file, which contains all data in
        the parameter file.

        Example: for the parameter file with name 'param', parse it by the code:
            p = readParamFile('param')

        After calling the readParamFile() function, users can retrieve the 
        values of any entries by using dot notation with the name of the 
        corresponding entries being accessed. There are four different types
        of objects that are stored within a Composite and that may be accessed
        through dot notation. These are listed below, along with a summary of 
        what is returned when they are accessed and an example command that
        would access this type of object in a typical parameter file:

            1. Composite: if an entry in a Composite is another Composite
               (identified by curly braces '{' and '}'), accessing this entry 
               will return the Composite itself; use square bracket indexing 
               starting with 0 to access blocks that have the same name.
                Example: p.Mixture    or    
                         p.Mixture.Polymer[1]
            2. Parameter: if an entry is a single parameter, it is identified
               by the absence of any bracket. Accessing a Parameter returns the 
               value of the parameter, which can be a string, an integer, a 
               float, or a Python list (if multiple entries are included on the 
               same line).
                Example: p.Mixture.nMonomer    or     
                         p.Domain.mesh
            3. Array: if an entry is an Array, it is identified by square 
               brackets '[' and ']'. Accessing an Array returns a Python list 
               of Parameters where each entry of the list represents one row 
               of the Array; a specific row can be accessed by square bracket 
               indexing.
                Example: p.Mixture.monomers    or
                         p.Mixture.monomers[0]
            4. Matrix: if an entry is a Matrix, it is identified by parentheses 
               '(' and ')'. Accessing a Matrix returns a list of lists that 
               represents a square, symmetric matrix; specific values within the
               Matrix can be accessed by two separate square bracket indices.
                Example: p.Interaction.chi    or
                         p.Interaction.chi[0][1]

        The parser also allows users to modify the entries in different 
        preset formats for particular types of objects with equal sign operator 
        ('='), which are listed below: 

            1. Parameter: single Parameter can be modified by Python arithmetic 
               operators, but parameter with a Python list can only be modified 
               by reassigning a new Python list to it
                Example: p.Mixture.Polymer[1].phi *= 2    or    
                         p.Mixture.Polymer[0].phi = 0.8   or    
                         p.Domain.mesh = [72, 72, 72]

            2. Array: change the whole Array by using a Python list
                Example: p.Mixture.monomers = [2.0, 2.0]

            3. Matrix: two ways to modify
                Example: 1. change the whole Matrix by using a list of lists 
                            that represents the squared, symmetric Matrix: 
                            p.Interaction.chi = [[0, 1.0], [1.0, 0]]
                         2. change two values that are symmetric at the 
                            same time:
                            p.Interaction.chi = [0, 1, 1.0], where the first and
                            second value of the list are the position of the 
                            values needs to be changed and the last value is the
                            new value assigned to the corresponding positions

        The Composite object can be written to a file by calling the writeOut() 
        method, passing in the string of the file name to which users want the 
        Composite to be written.
            Example: p.writeOut('paramOut')

Folder Contents:

    Element.py:
        class Element:
            The Element class is the base class of all types of elements in the 
            parameter file. It has four subclasses: Composite, Parameter, Array 
            and Matrix.

    Value.py:
        class Value:
            A Value object stores the value of a single string that represents 
            all or part part of the value of a parameter. It could implement 
            code to figure out the type of values among string, integer and 
            floating point.

    Composite.py:
        class Composite(Element):
            A Composite object can be identified by opening and closing curly 
            brackets ('{' and '}'). It can parse a parameter file block and 
            store its contents in a form that allows particular types of 
            elements within it to be accessed and modified.
        def readParamFile(filename):
            A method to read the parameter file with specific filename and store
            the data of all parameters in the read file

    Parameter.py:
        class Parameter(Element):
            A Parameter object contains a parameter label and its value for the 
            individual parameter within a single line.

    Array.py:
        class Array(Element):
            An Array object is a type of parameter that has values stored as 
            elements of a one-dimensional array which is given in a multi-line 
            format in which the first row contains a label that contains the 
            name of the array followed immediately by an opening square bracket 
            ('[') and the last line contains a matching closing square bracket 
            (']') itself. Elements of the one-dimensional array are in between 
            these delimiters with one element per line and appear in order of 
            increasing array index started from 0. 

    Matrix.py:
        class Matrix(Element):
            A Matrix object is a type of parameter that has values stored as
            elements of a matrix or two-dimensional array in element format that
            the value of each nonzero element of the matrix appears on separate 
            line. The element format for a matrix starts with a line that 
            contains a name label followed immediately by an opening parenthesis
            and ends with a line contains a matching closing parenthesis itself.
            In between, each line contains a row index, a column index and value
            of a single element of the array. 



